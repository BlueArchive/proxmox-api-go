package proxmox

import (
	"errors"
	"strings"
	"testing"

	"github.com/Telmate/proxmox-api-go/test/data/test_data_qemu"
	"github.com/stretchr/testify/require"
)

func Test_ConfigQemu_mapToStruct(t *testing.T) {
	uint2 := uint(2)
	uint31 := uint(31)
	uint47 := uint(47)
	uint53 := uint(53)
	tests := []struct {
		name   string
		input  map[string]interface{}
		output *ConfigQemu
		err    error
	}{
		// TODO add test cases for all other items of ConfigQemu{}
		// Disks Ide CdRom
		{name: "Disks Ide CdRom none",
			input:  map[string]interface{}{"ide1": "none,media=cdrom"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{CdRom: &QemuCdRom{}}}}},
		},
		{name: "Disks Ide CdRom passthrough",
			input:  map[string]interface{}{"ide2": "cdrom,media=cdrom"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{CdRom: &QemuCdRom{Passthrough: true}}}}},
		},
		{name: "Disks Ide CdRom iso",
			input: map[string]interface{}{"ide3": "local:iso/debian-11.0.0-amd64-netinst.iso,media=cdrom,size=377M"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{CdRom: &QemuCdRom{Iso: &IsoFile{
				File:    "debian-11.0.0-amd64-netinst.iso",
				Storage: "local",
				Size:    "377M",
			}}}}}},
		},
		// Disks Ide CloudInit
		{name: "Disks Ide CloudInit",
			input: map[string]interface{}{"ide0": "Test:100/vm-100-cloudinit.raw,media=cdrom"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{CloudInit: &QemuCloudInitDisk{
				Format:  QemuDiskFormat_Raw,
				Storage: "Test",
			}}}}},
		},
		// Disks Ide Disk
		{name: "Disks Ide Disk",
			input: map[string]interface{}{"ide0": "test2:100/vm-100-disk-53.qcow2"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint53,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Ide Disk ALL",
			input: map[string]interface{}{"ide1": "test2:100/vm-100-disk-53.qcow2,aio=io_uring,backup=0,cache=writethrough,discard=on,iops_rd=12,iops_rd_max=13,iops_wr=15,iops_wr_max=14,mbps_rd=1.46,mbps_rd_max=3.57,mbps_wr=2.68,mbps_wr_max=4.55,replicate=0,serial=disk-9763,size=1032G,ssd=1"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Disk: &QemuIdeDisk{
				AsyncIO: QemuDiskAsyncIO_IOuring,
				Backup:  false,
				Bandwidth: QemuDiskBandwidth{
					Data: QemuDiskBandwidthData{
						ReadLimit:  QemuDiskBandwidthDataLimit{Burst: 3.57, Concurrent: 1.46},
						WriteLimit: QemuDiskBandwidthDataLimit{Burst: 4.55, Concurrent: 2.68},
					},
					Iops: QemuDiskBandwidthIops{
						ReadLimit:  QemuDiskBandwidthIopsLimit{Burst: 13, Concurrent: 12},
						WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 14, Concurrent: 15},
					},
				},
				Cache:      QemuDiskCache_WriteThrough,
				Discard:    true,
				EmulateSSD: true,
				Format:     QemuDiskFormat_Qcow2,
				Id:         uint53,
				Replicate:  false,
				Serial:     "disk-9763",
				Size:       1032,
				Storage:    "test2",
			}}}}},
		},
		{name: "Disks Ide Disk aio",
			input: map[string]interface{}{"ide2": "test2:100/vm-100-disk-53.qcow2,aio=io_uring"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{Disk: &QemuIdeDisk{
				AsyncIO:   QemuDiskAsyncIO_IOuring,
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint53,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Ide Disk backup",
			input: map[string]interface{}{"ide3": "test2:100/vm-100-disk-53.qcow2,backup=0"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Backup:    false,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint53,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Ide Disk cache",
			input: map[string]interface{}{"ide0": "test2:100/vm-100-disk-53.qcow2,cache=writethrough"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Backup:    true,
				Cache:     QemuDiskCache_WriteThrough,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint53,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Ide Disk discard",
			input: map[string]interface{}{"ide1": "test2:100/vm-100-disk-53.qcow2,discard=on"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Backup:    true,
				Discard:   true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint53,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Ide Disk iops_rd",
			input: map[string]interface{}{"ide2": "test2:100/vm-100-disk-53.qcow2,iops_rd=12"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 12}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint53,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Ide Disk iops_rd_max",
			input: map[string]interface{}{"ide3": "test2:100/vm-100-disk-53.qcow2,iops_rd_max=13"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 13}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint53,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Ide Disk iops_wr",
			input: map[string]interface{}{"ide0": "test2:100/vm-100-disk-53.qcow2,iops_wr=15"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 15}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint53,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Ide Disk iops_wr_max",
			input: map[string]interface{}{"ide1": "test2:100/vm-100-disk-53.qcow2,iops_wr_max=14"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 14}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint53,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Ide Disk mbps_rd",
			input: map[string]interface{}{"ide2": "test2:100/vm-100-disk-53.qcow2,mbps_rd=1.46"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 1.46}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint53,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Ide Disk mbps_rd_max",
			input: map[string]interface{}{"ide3": "test2:100/vm-100-disk-53.qcow2,mbps_rd_max=3.57"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 3.57}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint53,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Ide Disk mbps_wr",
			input: map[string]interface{}{"ide0": "test2:100/vm-100-disk-53.qcow2,mbps_wr=2.68"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 2.68}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint53,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Ide Disk mbps_wr_max",
			input: map[string]interface{}{"ide1": "test2:100/vm-100-disk-53.qcow2,mbps_wr_max=4.55"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 4.55}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint53,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Ide Disk replicate",
			input: map[string]interface{}{"ide2": "test2:100/vm-100-disk-53.qcow2,replicate=0"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint53,
				Replicate: false,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Ide Disk serial",
			input: map[string]interface{}{"ide3": "test2:100/vm-100-disk-53.qcow2,serial=disk-9763"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint53,
				Replicate: true,
				Serial:    "disk-9763",
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Ide Disk size",
			input: map[string]interface{}{"ide0": "test2:100/vm-100-disk-53.qcow2,size=1032G"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint53,
				Replicate: true,
				Size:      1032,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Ide Disk ssd",
			input: map[string]interface{}{"ide1": "test2:100/vm-100-disk-53.qcow2,ssd=1"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Backup:     true,
				EmulateSSD: true,
				Format:     QemuDiskFormat_Qcow2,
				Id:         uint53,
				Replicate:  true,
				Storage:    "test2",
			}}}}},
		},
		// Disks Ide Passthrough
		{name: "Disks Ide Passthrough",
			input: map[string]interface{}{"ide0": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Ide Passthrough All",
			input: map[string]interface{}{"ide1": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,aio=threads,backup=0,cache=unsafe,discard=on,iops_rd=10,iops_rd_max=12,iops_wr=11,iops_wr_max=13,mbps_rd=1.51,mbps_rd_max=3.51,mbps_wr=2.51,mbps_wr_max=4.51,replicate=0,serial=disk-9763,size=1G,ssd=1"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{
				AsyncIO: QemuDiskAsyncIO_Threads,
				Backup:  false,
				Bandwidth: QemuDiskBandwidth{
					Data: QemuDiskBandwidthData{
						ReadLimit:  QemuDiskBandwidthDataLimit{Burst: 3.51, Concurrent: 1.51},
						WriteLimit: QemuDiskBandwidthDataLimit{Burst: 4.51, Concurrent: 2.51},
					},
					Iops: QemuDiskBandwidthIops{
						ReadLimit:  QemuDiskBandwidthIopsLimit{Burst: 12, Concurrent: 10},
						WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 13, Concurrent: 11},
					},
				},
				Cache:      QemuDiskCache_Unsafe,
				Discard:    true,
				EmulateSSD: true,
				File:       "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate:  false,
				Serial:     "disk-9763",
				Size:       1,
			}}}}},
		},
		{name: "Disks Ide Passthrough aio",
			input: map[string]interface{}{"ide2": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,aio=threads"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{
				AsyncIO:   QemuDiskAsyncIO_Threads,
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Ide Passthrough backup",
			input: map[string]interface{}{"ide3": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,backup=0"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{
				Backup:    false,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Ide Passthrough cache",
			input: map[string]interface{}{"ide0": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,cache=unsafe"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{
				Backup:    true,
				Cache:     QemuDiskCache_Unsafe,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Ide Passthrough discard",
			input: map[string]interface{}{"ide1": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,discard=on"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{
				Backup:    true,
				Discard:   true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Ide Passthrough iops_rd",
			input: map[string]interface{}{"ide2": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,iops_rd=10"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 10}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Ide Passthrough iops_rd_max",
			input: map[string]interface{}{"ide3": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,iops_rd_max=12"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 12}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Ide Passthrough iops_wr",
			input: map[string]interface{}{"ide0": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,iops_wr=11"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 11}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Ide Passthrough iops_wr_max",
			input: map[string]interface{}{"ide1": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,iops_wr_max=13"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 13}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Ide Passthrough mbps_rd",
			input: map[string]interface{}{"ide2": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,mbps_rd=1.51"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 1.51}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Ide Passthrough mbps_rd_max",
			input: map[string]interface{}{"ide3": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,mbps_rd_max=3.51"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 3.51}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Ide Passthrough mbps_wr",
			input: map[string]interface{}{"ide0": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,mbps_wr=2.51"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 2.51}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Ide Passthrough mbps_wr_max",
			input: map[string]interface{}{"ide1": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,mbps_wr_max=4.51"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 4.51}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Ide Passthrough replicate",
			input: map[string]interface{}{"ide2": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,replicate=0"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: false,
			}}}}},
		},
		{name: "Disks Ide Passthrough serial",
			input: map[string]interface{}{"ide3": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,serial=disk-9763"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
				Serial:    "disk-9763",
			}}}}},
		},
		{name: "Disks Ide Passthrough size",
			input: map[string]interface{}{"ide0": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,size=1G"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
				Size:      1,
			}}}}},
		},
		{name: "Disks Ide Passthrough ssd",
			input: map[string]interface{}{"ide1": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,ssd=1"},
			output: &ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{
				Backup:     true,
				EmulateSSD: true,
				File:       "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate:  true,
			}}}}},
		},
		// Disks Sata CdRom
		{name: "Disks Sata CdRom none",
			input:  map[string]interface{}{"sata5": "none,media=cdrom"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_5: &QemuSataStorage{CdRom: &QemuCdRom{}}}}},
		},
		{name: "Disks Sata CdRom passthrough",
			input:  map[string]interface{}{"sata4": "cdrom,media=cdrom"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_4: &QemuSataStorage{CdRom: &QemuCdRom{Passthrough: true}}}}},
		},
		{name: "Disks Sata CdRom iso",
			input: map[string]interface{}{"sata3": "local:iso/debian-11.0.0-amd64-netinst.iso,media=cdrom,size=377M"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_3: &QemuSataStorage{CdRom: &QemuCdRom{Iso: &IsoFile{
				File:    "debian-11.0.0-amd64-netinst.iso",
				Storage: "local",
				Size:    "377M",
			}}}}}},
		},
		// Disks Sata CloudInit
		{name: "Disks Sata CloudInit",
			input: map[string]interface{}{"sata0": "Test:100/vm-100-cloudinit.raw,media=cdrom"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{CloudInit: &QemuCloudInitDisk{
				Format:  QemuDiskFormat_Raw,
				Storage: "Test",
			}}}}},
		},
		// Disks Sata Disk
		{name: "Disks Sata Disk",
			input: map[string]interface{}{"sata0": "test2:100/vm-100-disk-47.qcow2"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{Disk: &QemuSataDisk{
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint47,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Sata Disk ALL",
			input: map[string]interface{}{"sata1": "test2:100/vm-100-disk-47.qcow2,aio=native,backup=0,cache=none,discard=on,iops_rd=10,iops_rd_max=12,iops_wr=11,iops_wr_max=13,mbps_rd=1.51,mbps_rd_max=3.51,mbps_wr=2.51,mbps_wr_max=4.51,replicate=0,serial=disk-9763,size=32G,ssd=1"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{Disk: &QemuSataDisk{
				AsyncIO: QemuDiskAsyncIO_Native,
				Backup:  false,
				Bandwidth: QemuDiskBandwidth{
					Data: QemuDiskBandwidthData{
						ReadLimit:  QemuDiskBandwidthDataLimit{Burst: 3.51, Concurrent: 1.51},
						WriteLimit: QemuDiskBandwidthDataLimit{Burst: 4.51, Concurrent: 2.51},
					},
					Iops: QemuDiskBandwidthIops{
						ReadLimit:  QemuDiskBandwidthIopsLimit{Burst: 12, Concurrent: 10},
						WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 13, Concurrent: 11},
					},
				},
				Cache:      QemuDiskCache_None,
				Discard:    true,
				EmulateSSD: true,
				Format:     QemuDiskFormat_Qcow2,
				Id:         uint47,
				Replicate:  false,
				Serial:     "disk-9763",
				Size:       32,
				Storage:    "test2",
			}}}}},
		},
		{name: "Disks Sata Disk aio",
			input: map[string]interface{}{"sata2": "test2:100/vm-100-disk-47.qcow2,aio=native"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{Disk: &QemuSataDisk{
				AsyncIO:   QemuDiskAsyncIO_Native,
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint47,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Sata Disk backup",
			input: map[string]interface{}{"sata3": "test2:100/vm-100-disk-47.qcow2,backup=0"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_3: &QemuSataStorage{Disk: &QemuSataDisk{
				Backup:    false,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint47,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Sata Disk cache",
			input: map[string]interface{}{"sata4": "test2:100/vm-100-disk-47.qcow2,cache=none"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_4: &QemuSataStorage{Disk: &QemuSataDisk{
				Backup:    true,
				Cache:     QemuDiskCache_None,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint47,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Sata Disk discard",
			input: map[string]interface{}{"sata5": "test2:100/vm-100-disk-47.qcow2,discard=on"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_5: &QemuSataStorage{Disk: &QemuSataDisk{
				Backup:    true,
				Discard:   true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint47,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Sata Disk iops_rd",
			input: map[string]interface{}{"sata0": "test2:100/vm-100-disk-47.qcow2,iops_rd=10"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{Disk: &QemuSataDisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 10}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint47,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Sata Disk iops_rd_max",
			input: map[string]interface{}{"sata1": "test2:100/vm-100-disk-47.qcow2,iops_rd_max=12"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{Disk: &QemuSataDisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 12}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint47,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Sata Disk iops_wr",
			input: map[string]interface{}{"sata2": "test2:100/vm-100-disk-47.qcow2,iops_wr=11"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{Disk: &QemuSataDisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 11}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint47,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Sata Disk iops_wr_max",
			input: map[string]interface{}{"sata3": "test2:100/vm-100-disk-47.qcow2,iops_wr_max=13"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_3: &QemuSataStorage{Disk: &QemuSataDisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 13}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint47,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Sata Disk mbps_rd",
			input: map[string]interface{}{"sata4": "test2:100/vm-100-disk-47.qcow2,mbps_rd=1.51"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_4: &QemuSataStorage{Disk: &QemuSataDisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 1.51}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint47,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Sata Disk mbps_rd_max",
			input: map[string]interface{}{"sata5": "test2:100/vm-100-disk-47.qcow2,mbps_rd_max=3.51"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_5: &QemuSataStorage{Disk: &QemuSataDisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 3.51}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint47,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Sata Disk mbps_wr",
			input: map[string]interface{}{"sata0": "test2:100/vm-100-disk-47.qcow2,mbps_wr=2.51"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{Disk: &QemuSataDisk{
				Backup: true,
				Bandwidth: QemuDiskBandwidth{
					Data: QemuDiskBandwidthData{
						WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 2.51},
					},
				},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint47,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Sata Disk mbps_wr_max",
			input: map[string]interface{}{"sata1": "test2:100/vm-100-disk-47.qcow2,mbps_wr_max=4.51"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{Disk: &QemuSataDisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 4.51}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint47,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Sata Disk replicate",
			input: map[string]interface{}{"sata2": "test2:100/vm-100-disk-47.qcow2,replicate=0"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{Disk: &QemuSataDisk{
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint47,
				Replicate: false,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Sata Disk serial",
			input: map[string]interface{}{"sata3": "test2:100/vm-100-disk-47.qcow2,serial=disk-9763"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_3: &QemuSataStorage{Disk: &QemuSataDisk{
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint47,
				Replicate: true,
				Serial:    "disk-9763",
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Sata Disk size",
			input: map[string]interface{}{"sata4": "test2:100/vm-100-disk-47.qcow2,size=32G"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_4: &QemuSataStorage{Disk: &QemuSataDisk{
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint47,
				Replicate: true,
				Size:      32,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks Sata Disk ssd",
			input: map[string]interface{}{"sata5": "test2:100/vm-100-disk-47.qcow2,ssd=1"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_5: &QemuSataStorage{Disk: &QemuSataDisk{
				Backup:     true,
				EmulateSSD: true,
				Format:     QemuDiskFormat_Qcow2,
				Id:         uint47,
				Replicate:  true,
				Storage:    "test2",
			}}}}},
		},
		// Disks Sata Passthrough
		{name: "Disks Sata Passthrough",
			input: map[string]interface{}{"sata1": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{Passthrough: &QemuSataPassthrough{
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Sata Passthrough All",
			input: map[string]interface{}{"sata1": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,aio=io_uring,backup=0,cache=directsync,discard=on,iops_rd=10,iops_rd_max=12,iops_wr=11,iops_wr_max=13,mbps_rd=1.51,mbps_rd_max=3.51,mbps_wr=2.51,mbps_wr_max=4.51,replicate=0,serial=disk-9763,size=1G,ssd=1"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{Passthrough: &QemuSataPassthrough{
				AsyncIO: QemuDiskAsyncIO_IOuring,
				Backup:  false,
				Bandwidth: QemuDiskBandwidth{
					Data: QemuDiskBandwidthData{
						ReadLimit:  QemuDiskBandwidthDataLimit{Burst: 3.51, Concurrent: 1.51},
						WriteLimit: QemuDiskBandwidthDataLimit{Burst: 4.51, Concurrent: 2.51},
					},
					Iops: QemuDiskBandwidthIops{
						ReadLimit:  QemuDiskBandwidthIopsLimit{Burst: 12, Concurrent: 10},
						WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 13, Concurrent: 11},
					},
				},
				Cache:      QemuDiskCache_DirectSync,
				Discard:    true,
				EmulateSSD: true,
				File:       "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate:  false,
				Serial:     "disk-9763",
				Size:       1,
			}}}}},
		},
		{name: "Disks Sata Passthrough aio",
			input: map[string]interface{}{"sata2": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,aio=io_uring"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{Passthrough: &QemuSataPassthrough{
				AsyncIO:   QemuDiskAsyncIO_IOuring,
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Sata Passthrough backup",
			input: map[string]interface{}{"sata3": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,backup=0"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_3: &QemuSataStorage{Passthrough: &QemuSataPassthrough{
				Backup:    false,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Sata Passthrough cache",
			input: map[string]interface{}{"sata4": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,cache=directsync"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_4: &QemuSataStorage{Passthrough: &QemuSataPassthrough{
				Backup:    true,
				Cache:     QemuDiskCache_DirectSync,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Sata Passthrough discard",
			input: map[string]interface{}{"sata5": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,discard=on"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_5: &QemuSataStorage{Passthrough: &QemuSataPassthrough{
				Backup:    true,
				Discard:   true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Sata Passthrough iops_rd",
			input: map[string]interface{}{"sata0": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,iops_rd=10"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{Passthrough: &QemuSataPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 10}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Sata Passthrough iops_rd_max",
			input: map[string]interface{}{"sata1": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,iops_rd_max=12"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{Passthrough: &QemuSataPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 12}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Sata Passthrough iops_wr",
			input: map[string]interface{}{"sata2": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,iops_wr=11"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{Passthrough: &QemuSataPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 11}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Sata Passthrough iops_wr_max",
			input: map[string]interface{}{"sata3": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,iops_wr_max=13"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_3: &QemuSataStorage{Passthrough: &QemuSataPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 13}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Sata Passthrough mbps_rd",
			input: map[string]interface{}{"sata4": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,mbps_rd=1.51"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_4: &QemuSataStorage{Passthrough: &QemuSataPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 1.51}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Sata Passthrough mbps_rd_max",
			input: map[string]interface{}{"sata5": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,mbps_rd_max=3.51"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_5: &QemuSataStorage{Passthrough: &QemuSataPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 3.51}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Sata Passthrough mbps_wr",
			input: map[string]interface{}{"sata0": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,mbps_wr=2.51"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{Passthrough: &QemuSataPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 2.51}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Sata Passthrough mbps_wr_max",
			input: map[string]interface{}{"sata1": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,mbps_wr_max=4.51"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{Passthrough: &QemuSataPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 4.51}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Sata Passthrough replicate",
			input: map[string]interface{}{"sata2": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,replicate=0"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{Passthrough: &QemuSataPassthrough{
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: false,
			}}}}},
		},
		{name: "Disks Sata Passthrough serial",
			input: map[string]interface{}{"sata3": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,serial=disk-9763"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_3: &QemuSataStorage{Passthrough: &QemuSataPassthrough{
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
				Serial:    "disk-9763",
			}}}}},
		},
		{name: "Disks Sata Passthrough size",
			input: map[string]interface{}{"sata4": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,size=1G"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_4: &QemuSataStorage{Passthrough: &QemuSataPassthrough{
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
				Size:      1,
			}}}}},
		},
		{name: "Disks Sata Passthrough ssd",
			input: map[string]interface{}{"sata5": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,ssd=1"},
			output: &ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_5: &QemuSataStorage{Passthrough: &QemuSataPassthrough{
				Backup:     true,
				EmulateSSD: true,
				File:       "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate:  true,
			}}}}},
		},
		// Disks Scsi CdRom
		{name: "Disks Scsi CdRom none",
			input:  map[string]interface{}{"scsi30": "none,media=cdrom"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_30: &QemuScsiStorage{CdRom: &QemuCdRom{}}}}},
		},
		{name: "Disks Scsi CdRom passthrough",
			input:  map[string]interface{}{"scsi29": "cdrom,media=cdrom"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_29: &QemuScsiStorage{CdRom: &QemuCdRom{Passthrough: true}}}}},
		},
		{name: "Disks Scsi CdRom iso",
			input: map[string]interface{}{"scsi28": "local:iso/debian-11.0.0-amd64-netinst.iso,media=cdrom,size=377M"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_28: &QemuScsiStorage{CdRom: &QemuCdRom{Iso: &IsoFile{
				File:    "debian-11.0.0-amd64-netinst.iso",
				Storage: "local",
				Size:    "377M",
			}}}}}},
		},
		// Disks Scsi CloudInit
		{name: "Disks Scsi CloudInit",
			input: map[string]interface{}{"scsi0": "Test:100/vm-100-cloudinit.raw,media=cdrom"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_0: &QemuScsiStorage{CloudInit: &QemuCloudInitDisk{
				Format:  QemuDiskFormat_Raw,
				Storage: "Test",
			}}}}},
		},
		// Disks Scsi Disk
		{name: "Disks Scsi Disk",
			input: map[string]interface{}{"scsi0": "test:100/vm-100-disk-2.qcow2"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_0: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint2,
				Replicate: true,
				Storage:   "test",
			}}}}},
		},
		{name: "Disks Scsi Disk ALL",
			input: map[string]interface{}{"scsi1": "test:100/vm-100-disk-2.qcow2,aio=threads,backup=0,cache=writeback,discard=on,iops_rd=10,iops_rd_max=12,iops_wr=11,iops_wr_max=13,iothread=1,mbps_rd=1.51,mbps_rd_max=3.51,mbps_wr=2.51,mbps_wr_max=4.51,replicate=0,ro=1,serial=disk-9763,size=32G,ssd=1"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_1: &QemuScsiStorage{Disk: &QemuScsiDisk{
				AsyncIO: QemuDiskAsyncIO_Threads,
				Backup:  false,
				Bandwidth: QemuDiskBandwidth{
					Data: QemuDiskBandwidthData{
						ReadLimit:  QemuDiskBandwidthDataLimit{Burst: 3.51, Concurrent: 1.51},
						WriteLimit: QemuDiskBandwidthDataLimit{Burst: 4.51, Concurrent: 2.51},
					},
					Iops: QemuDiskBandwidthIops{
						ReadLimit:  QemuDiskBandwidthIopsLimit{Burst: 12, Concurrent: 10},
						WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 13, Concurrent: 11},
					},
				},
				Cache:      QemuDiskCache_WriteBack,
				Discard:    true,
				EmulateSSD: true,
				Format:     QemuDiskFormat_Qcow2,
				Id:         uint2,
				IOThread:   true,
				ReadOnly:   true,
				Replicate:  false,
				Serial:     "disk-9763",
				Size:       32,
				Storage:    "test",
			}}}}},
		},
		{name: "Disks Scsi Disk aio",
			input: map[string]interface{}{"scsi2": "test:100/vm-100-disk-2.qcow2,aio=threads"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_2: &QemuScsiStorage{Disk: &QemuScsiDisk{
				AsyncIO:   QemuDiskAsyncIO_Threads,
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint2,
				Replicate: true,
				Storage:   "test",
			}}}}},
		},
		{name: "Disks Scsi Disk backup",
			input: map[string]interface{}{"scsi3": "test:100/vm-100-disk-2.qcow2,backup=0"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_3: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Backup:    false,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint2,
				Replicate: true,
				Storage:   "test",
			}}}}},
		},
		{name: "Disks Scsi Disk cache",
			input: map[string]interface{}{"scsi4": "test:100/vm-100-disk-2.qcow2,cache=writeback"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_4: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Backup:    true,
				Cache:     QemuDiskCache_WriteBack,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint2,
				Replicate: true,
				Storage:   "test",
			}}}}},
		},
		{name: "Disks Scsi Disk discard",
			input: map[string]interface{}{"scsi5": "test:100/vm-100-disk-2.qcow2,discard=on"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_5: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Backup:    true,
				Discard:   true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint2,
				Replicate: true,
				Storage:   "test",
			}}}}},
		},
		{name: "Disks Scsi Disk iops_rd",
			input: map[string]interface{}{"scsi6": "test:100/vm-100-disk-2.qcow2,iops_rd=10"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_6: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 10}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint2,
				Replicate: true,
				Storage:   "test",
			}}}}},
		},
		{name: "Disks Scsi Disk iops_rd_max",
			input: map[string]interface{}{"scsi7": "test:100/vm-100-disk-2.qcow2,iops_rd_max=12"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_7: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 12}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint2,
				Replicate: true,
				Storage:   "test",
			}}}}},
		},
		{name: "Disks Scsi Disk iops_wr",
			input: map[string]interface{}{"scsi8": "test:100/vm-100-disk-2.qcow2,iops_wr=11"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_8: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 11}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint2,
				Replicate: true,
				Storage:   "test",
			}}}}},
		},
		{name: "Disks Scsi Disk iops_wr_max",
			input: map[string]interface{}{"scsi9": "test:100/vm-100-disk-2.qcow2,iops_wr_max=13"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_9: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 13}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint2,
				Replicate: true,
				Storage:   "test",
			}}}}},
		},
		{name: "Disks Scsi Disk iothread",
			input: map[string]interface{}{"scsi10": "test:100/vm-100-disk-2.qcow2,iothread=1"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_10: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint2,
				IOThread:  true,
				Replicate: true,
				Storage:   "test",
			}}}}},
		},
		{name: "Disks Scsi Disk mbps_rd",
			input: map[string]interface{}{"scsi11": "test:100/vm-100-disk-2.qcow2,mbps_rd=1.51"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_11: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 1.51}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint2,
				Replicate: true,
				Storage:   "test",
			}}}}},
		},
		{name: "Disks Scsi Disk mbps_rd_max",
			input: map[string]interface{}{"scsi12": "test:100/vm-100-disk-2.qcow2,mbps_rd_max=3.51"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_12: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 3.51}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint2,
				Replicate: true,
				Storage:   "test",
			}}}}},
		},
		{name: "Disks Scsi Disk mbps_wr",
			input: map[string]interface{}{"scsi13": "test:100/vm-100-disk-2.qcow2,mbps_wr=2.51"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_13: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 2.51}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint2,
				Replicate: true,
				Storage:   "test",
			}}}}},
		},
		{name: "Disks Scsi Disk mbps_wr_max",
			input: map[string]interface{}{"scsi14": "test:100/vm-100-disk-2.qcow2,mbps_wr_max=4.51"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_14: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 4.51}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint2,
				Replicate: true,
				Storage:   "test",
			}}}}},
		},
		{name: "Disks Scsi Disk replicate",
			input: map[string]interface{}{"scsi15": "test:100/vm-100-disk-2.qcow2,replicate=0"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_15: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint2,
				Replicate: false,
				Storage:   "test",
			}}}}},
		},
		{name: "Disks Scsi Disk ro",
			input: map[string]interface{}{"scsi16": "test:100/vm-100-disk-2.qcow2,ro=1"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_16: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint2,
				ReadOnly:  true,
				Replicate: true,
				Storage:   "test",
			}}}}},
		},
		{name: "Disks Scsi Disk serial",
			input: map[string]interface{}{"scsi17": "test:100/vm-100-disk-2.qcow2,serial=disk-9763"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_17: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint2,
				Replicate: true,
				Serial:    "disk-9763",
				Storage:   "test",
			}}}}},
		},
		{name: "Disks Scsi Disk size",
			input: map[string]interface{}{"scsi18": "test:100/vm-100-disk-2.qcow2,size=32G"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_18: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint2,
				Replicate: true,
				Size:      32,
				Storage:   "test",
			}}}}},
		},
		{name: "Disks Scsi Disk ssd",
			input: map[string]interface{}{"scsi19": "test:100/vm-100-disk-2.qcow2,ssd=1"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_19: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Backup:     true,
				EmulateSSD: true,
				Format:     QemuDiskFormat_Qcow2,
				Id:         uint2,
				Replicate:  true,
				Storage:    "test",
			}}}}},
		},
		// Disks Scsi Passthrough
		{name: "Disks Scsi Passthrough",
			input: map[string]interface{}{"scsi0": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_0: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Scsi Passthrough All",
			input: map[string]interface{}{"scsi1": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,aio=threads,backup=0,cache=none,discard=on,iops_rd=10,iops_rd_max=12,iops_wr=11,iops_wr_max=13,iothread=1,mbps_rd=1.51,mbps_rd_max=3.51,mbps_wr=2.51,mbps_wr_max=4.51,replicate=0,ro=1,serial=disk-9763,size=1G,ssd=1"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_1: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{
				AsyncIO: QemuDiskAsyncIO_Threads,
				Backup:  false,
				Bandwidth: QemuDiskBandwidth{
					Data: QemuDiskBandwidthData{
						ReadLimit:  QemuDiskBandwidthDataLimit{Burst: 3.51, Concurrent: 1.51},
						WriteLimit: QemuDiskBandwidthDataLimit{Burst: 4.51, Concurrent: 2.51},
					},
					Iops: QemuDiskBandwidthIops{
						ReadLimit:  QemuDiskBandwidthIopsLimit{Burst: 12, Concurrent: 10},
						WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 13, Concurrent: 11},
					},
				},
				Cache:      QemuDiskCache_None,
				Discard:    true,
				EmulateSSD: true,
				File:       "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				IOThread:   true,
				ReadOnly:   true,
				Replicate:  false,
				Serial:     "disk-9763",
				Size:       1,
			}}}}},
		},
		{name: "Disks Scsi Passthrough aio",
			input: map[string]interface{}{"scsi2": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,aio=threads"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_2: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{
				AsyncIO:   QemuDiskAsyncIO_Threads,
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Scsi Passthrough backup",
			input: map[string]interface{}{"scsi3": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,backup=0"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_3: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{
				Backup:    false,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Scsi Passthrough cache",
			input: map[string]interface{}{"scsi4": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,cache=none"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_4: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{
				Backup:    true,
				Cache:     QemuDiskCache_None,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Scsi Passthrough discard",
			input: map[string]interface{}{"scsi5": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,discard=on"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_5: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{
				Backup:    true,
				Discard:   true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Scsi Passthrough iops_rd",
			input: map[string]interface{}{"scsi6": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,iops_rd=10"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_6: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 10}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Scsi Passthrough iops_rd_max",
			input: map[string]interface{}{"scsi7": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,iops_rd_max=12"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_7: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 12}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Scsi Passthrough iops_wr",
			input: map[string]interface{}{"scsi8": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,iops_wr=11"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_8: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 11}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Scsi Passthrough iops_wr_max",
			input: map[string]interface{}{"scsi9": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,iops_wr_max=13"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_9: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 13}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Scsi Passthrough iothread",
			input: map[string]interface{}{"scsi10": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,iothread=1"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_10: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				IOThread:  true,
				Replicate: true,
			}}}}},
		},
		{name: "Disks Scsi Passthrough mbps_rd",
			input: map[string]interface{}{"scsi11": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,mbps_rd=1.51"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_11: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 1.51}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Scsi Passthrough mbps_rd_max",
			input: map[string]interface{}{"scsi12": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,mbps_rd_max=3.51"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_12: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 3.51}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Scsi Passthrough mbps_wr",
			input: map[string]interface{}{"scsi13": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,mbps_wr=2.51"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_13: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 2.51}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Scsi Passthrough mbps_wr_max",
			input: map[string]interface{}{"scsi14": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,mbps_wr_max=4.51"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_14: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 4.51}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks Scsi Passthrough replicate",
			input: map[string]interface{}{"scsi15": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,replicate=0"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_15: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: false,
			}}}}},
		},
		{name: "Disks Scsi Passthrough ro",
			input: map[string]interface{}{"scsi16": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,ro=1"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_16: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				ReadOnly:  true,
				Replicate: true,
			}}}}},
		},
		{name: "Disks Scsi Passthrough serial",
			input: map[string]interface{}{"scsi17": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,serial=disk-9763"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_17: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
				Serial:    "disk-9763",
			}}}}},
		},
		{name: "Disks Scsi Passthrough size",
			input: map[string]interface{}{"scsi18": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,size=1G"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_18: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
				Size:      1,
			}}}}},
		},
		{name: "Disks Scsi Passthrough ssd",
			input: map[string]interface{}{"scsi19": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,ssd=1"},
			output: &ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_19: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{
				Backup:     true,
				EmulateSSD: true,
				File:       "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate:  true,
			}}}}},
		},
		// VirtIO CdRom
		{name: "Disks VirtIO CdRom none",
			input:  map[string]interface{}{"virtio11": "none,media=cdrom"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_11: &QemuVirtIOStorage{CdRom: &QemuCdRom{}}}}},
		},
		{name: "Disks VirtIO CdRom passthrough",
			input:  map[string]interface{}{"virtio10": "cdrom,media=cdrom"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_10: &QemuVirtIOStorage{CdRom: &QemuCdRom{Passthrough: true}}}}},
		},
		{name: "Disks VirtIO CdRom iso",
			input: map[string]interface{}{"virtio9": "local:iso/debian-11.0.0-amd64-netinst.iso,media=cdrom,size=377M"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_9: &QemuVirtIOStorage{CdRom: &QemuCdRom{Iso: &IsoFile{
				File:    "debian-11.0.0-amd64-netinst.iso",
				Storage: "local",
				Size:    "377M",
			}}}}}},
		},
		// Disks VirtIO CloudInit
		{name: "Disks VirtIO CloudInit",
			input: map[string]interface{}{"virtio0": "Test:100/vm-100-cloudinit.raw,media=cdrom"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{CloudInit: &QemuCloudInitDisk{
				Format:  QemuDiskFormat_Raw,
				Storage: "Test",
			}}}}},
		},
		// Disks VirtIO Disk
		{name: "Disks VirtIO Disk",
			input: map[string]interface{}{"virtio0": "test2:100/vm-100-disk-31.qcow2"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint31,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks VirtIO Disk ALL",
			input: map[string]interface{}{"virtio1": "test2:100/vm-100-disk-31.qcow2,aio=io_uring,backup=0,cache=directsync,discard=on,iops_rd=10,iops_rd_max=12,iops_wr=11,iops_wr_max=13,iothread=1,mbps_rd=1.51,mbps_rd_max=3.51,mbps_wr=2.51,mbps_wr_max=4.51,replicate=0,ro=1,serial=disk-9763,size=32G"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_1: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				AsyncIO: QemuDiskAsyncIO_IOuring,
				Backup:  false,
				Bandwidth: QemuDiskBandwidth{
					Data: QemuDiskBandwidthData{
						ReadLimit:  QemuDiskBandwidthDataLimit{Burst: 3.51, Concurrent: 1.51},
						WriteLimit: QemuDiskBandwidthDataLimit{Burst: 4.51, Concurrent: 2.51},
					},
					Iops: QemuDiskBandwidthIops{
						ReadLimit:  QemuDiskBandwidthIopsLimit{Burst: 12, Concurrent: 10},
						WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 13, Concurrent: 11},
					},
				},
				Cache:     QemuDiskCache_DirectSync,
				Discard:   true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint31,
				IOThread:  true,
				ReadOnly:  true,
				Replicate: false,
				Serial:    "disk-9763",
				Size:      32,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks VirtIO Disk aio",
			input: map[string]interface{}{"virtio2": "test2:100/vm-100-disk-31.qcow2,aio=io_uring"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_2: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				AsyncIO:   QemuDiskAsyncIO_IOuring,
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint31,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks VirtIO Disk backup",
			input: map[string]interface{}{"virtio3": "test2:100/vm-100-disk-31.qcow2,backup=0"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_3: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Backup:    false,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint31,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks VirtIO Disk cache",
			input: map[string]interface{}{"virtio4": "test2:100/vm-100-disk-31.qcow2,cache=directsync"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_4: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Backup:    true,
				Cache:     QemuDiskCache_DirectSync,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint31,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks VirtIO Disk discard",
			input: map[string]interface{}{"virtio5": "test2:100/vm-100-disk-31.qcow2,discard=on"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_5: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Backup:    true,
				Discard:   true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint31,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks VirtIO Disk iops_rd",
			input: map[string]interface{}{"virtio6": "test2:100/vm-100-disk-31.qcow2,iops_rd=10"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_6: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 10}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint31,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks VirtIO Disk iops_rd_max",
			input: map[string]interface{}{"virtio7": "test2:100/vm-100-disk-31.qcow2,iops_rd_max=12"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_7: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Backup: true,
				Bandwidth: QemuDiskBandwidth{
					Iops: QemuDiskBandwidthIops{
						ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 12},
					},
				},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint31,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks VirtIO Disk iops_wr",
			input: map[string]interface{}{"virtio8": "test2:100/vm-100-disk-31.qcow2,iops_wr=11"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_8: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 11}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint31,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks VirtIO Disk iops_wr_max",
			input: map[string]interface{}{"virtio9": "test2:100/vm-100-disk-31.qcow2,iops_wr_max=13"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_9: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 13}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint31,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks VirtIO Disk iothread",
			input: map[string]interface{}{"virtio10": "test2:100/vm-100-disk-31.qcow2,iothread=1"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_10: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint31,
				IOThread:  true,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks VirtIO Disk mbps_rd",
			input: map[string]interface{}{"virtio11": "test2:100/vm-100-disk-31.qcow2,mbps_rd=1.51"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_11: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Backup: true,
				Bandwidth: QemuDiskBandwidth{
					Data: QemuDiskBandwidthData{
						ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 1.51},
					},
				},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint31,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks VirtIO Disk mbps_rd_max",
			input: map[string]interface{}{"virtio12": "test2:100/vm-100-disk-31.qcow2,mbps_rd_max=3.51"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_12: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 3.51}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint31,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks VirtIO Disk mbps_wr",
			input: map[string]interface{}{"virtio13": "test2:100/vm-100-disk-31.qcow2,mbps_wr=2.51"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_13: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 2.51}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint31,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks VirtIO Disk mbps_wr_max",
			input: map[string]interface{}{"virtio14": "test2:100/vm-100-disk-31.qcow2,mbps_wr_max=4.51"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_14: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 4.51}}},
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint31,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks VirtIO Disk replicate",
			input: map[string]interface{}{"virtio15": "test2:100/vm-100-disk-31.qcow2,replicate=0"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_15: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint31,
				Replicate: false,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks VirtIO Disk ro",
			input: map[string]interface{}{"virtio0": "test2:100/vm-100-disk-31.qcow2,ro=1"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint31,
				ReadOnly:  true,
				Replicate: true,
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks VirtIO Disk serial",
			input: map[string]interface{}{"virtio1": "test2:100/vm-100-disk-31.qcow2,serial=disk-9763"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_1: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint31,
				Replicate: true,
				Serial:    "disk-9763",
				Storage:   "test2",
			}}}}},
		},
		{name: "Disks VirtIO Disk size",
			input: map[string]interface{}{"virtio2": "test2:100/vm-100-disk-31.qcow2,size=32G"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_2: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Backup:    true,
				Format:    QemuDiskFormat_Qcow2,
				Id:        uint31,
				Replicate: true,
				Size:      32,
				Storage:   "test2",
			}}}}},
		},
		// Disks VirtIO Passthrough
		{name: "Disks VirtIO Passthrough",
			input: map[string]interface{}{"virtio0": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks VirtIO Passthrough ALL",
			input: map[string]interface{}{"virtio1": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,aio=native,backup=0,cache=unsafe,discard=on,iops_rd=10,iops_rd_max=12,iops_wr=11,iops_wr_max=13,iothread=1,mbps_rd=1.51,mbps_rd_max=3.51,mbps_wr=2.51,mbps_wr_max=4.51,replicate=0,ro=1,serial=disk-9763,size=1G"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_1: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{
				AsyncIO: QemuDiskAsyncIO_Native,
				Backup:  false,
				Bandwidth: QemuDiskBandwidth{
					Data: QemuDiskBandwidthData{
						ReadLimit:  QemuDiskBandwidthDataLimit{Burst: 3.51, Concurrent: 1.51},
						WriteLimit: QemuDiskBandwidthDataLimit{Burst: 4.51, Concurrent: 2.51},
					},
					Iops: QemuDiskBandwidthIops{
						ReadLimit:  QemuDiskBandwidthIopsLimit{Burst: 12, Concurrent: 10},
						WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 13, Concurrent: 11},
					},
				},
				Cache:     QemuDiskCache_Unsafe,
				Discard:   true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				IOThread:  true,
				ReadOnly:  true,
				Replicate: false,
				Serial:    "disk-9763",
				Size:      1,
			}}}}},
		},
		{name: "Disks VirtIO Passthrough aio",
			input: map[string]interface{}{"virtio2": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,aio=native"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_2: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{
				AsyncIO:   QemuDiskAsyncIO_Native,
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks VirtIO Passthrough backup",
			input: map[string]interface{}{"virtio3": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,backup=0"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_3: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{
				Backup:    false,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks VirtIO Passthrough cache",
			input: map[string]interface{}{"virtio4": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,cache=unsafe"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_4: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{
				Backup:    true,
				Cache:     QemuDiskCache_Unsafe,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks VirtIO Passthrough discard",
			input: map[string]interface{}{"virtio5": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,discard=on"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_5: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{
				Backup:    true,
				Discard:   true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks VirtIO Passthrough iops_rd",
			input: map[string]interface{}{"virtio6": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,iops_rd=10"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_6: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 10}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks VirtIO Passthrough iops_rd_max",
			input: map[string]interface{}{"virtio7": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,iops_rd_max=12"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_7: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 12}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks VirtIO Passthrough iops_wr",
			input: map[string]interface{}{"virtio8": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,iops_wr=11"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_8: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 11}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks VirtIO Passthrough iops_wr_max",
			input: map[string]interface{}{"virtio9": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,iops_wr_max=13"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_9: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 13}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks VirtIO Passthrough iothread",
			input: map[string]interface{}{"virtio10": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,iothread=1"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_10: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				IOThread:  true,
				Replicate: true,
			}}}}},
		},
		{name: "Disks VirtIO Passthrough mbps_rd",
			input: map[string]interface{}{"virtio11": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,mbps_rd=1.51"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_11: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 1.51}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks VirtIO Passthrough mbps_rd_max",
			input: map[string]interface{}{"virtio12": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,mbps_rd_max=3.51"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_12: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 3.51}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks VirtIO Passthrough mbps_wr",
			input: map[string]interface{}{"virtio13": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,mbps_wr=2.51"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_13: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 2.51}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks VirtIO Passthrough mbps_wr_max",
			input: map[string]interface{}{"virtio14": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,mbps_wr_max=4.51"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_14: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{
				Backup:    true,
				Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 4.51}}},
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
			}}}}},
		},
		{name: "Disks VirtIO Passthrough replicate",
			input: map[string]interface{}{"virtio15": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,replicate=0"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_15: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: false,
			}}}}},
		},
		{name: "Disks VirtIO Passthrough ro",
			input: map[string]interface{}{"virtio0": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,ro=1"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				ReadOnly:  true,
				Replicate: true,
			}}}}},
		},
		{name: "Disks VirtIO Passthrough serial",
			input: map[string]interface{}{"virtio1": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,serial=disk-9763"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_1: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
				Serial:    "disk-9763",
			}}}}},
		},
		{name: "Disks VirtIO Passthrough size",
			input: map[string]interface{}{"virtio2": "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8,size=1G"},
			output: &ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_2: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{
				Backup:    true,
				File:      "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi8",
				Replicate: true,
				Size:      1,
			}}}}},
		},
		// Iso
		{name: "Iso",
			input: map[string]interface{}{"ide2": "local:iso/debian-11.0.0-amd64-netinst.iso,media=cdrom,size=377M"},
			output: &ConfigQemu{
				Iso: &IsoFile{
					File:    "debian-11.0.0-amd64-netinst.iso",
					Storage: "local",
					Size:    "377M",
				},
				Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{CdRom: &QemuCdRom{
					Iso: &IsoFile{
						File:    "debian-11.0.0-amd64-netinst.iso",
						Storage: "local",
						Size:    "377M",
					},
				}}}},
			},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(*testing.T) {
			output, err := ConfigQemu{}.mapToStruct(test.input)
			if err != nil {
				require.Equal(t, test.err, err, test.name)
			} else {
				require.Equal(t, test.output, output, test.name)
			}
		})
	}
}
func Test_ConfigQemu_Validate(t *testing.T) {
	BandwidthValid0 := QemuDiskBandwidth{
		Data: QemuDiskBandwidthData{
			ReadLimit: QemuDiskBandwidthDataLimit{
				Burst:      0,
				Concurrent: 0,
			},
			WriteLimit: QemuDiskBandwidthDataLimit{
				Burst:      0,
				Concurrent: 0,
			},
		},
		Iops: QemuDiskBandwidthIops{
			ReadLimit: QemuDiskBandwidthIopsLimit{
				Burst:      0,
				Concurrent: 0,
			},
			WriteLimit: QemuDiskBandwidthIopsLimit{
				Burst:      0,
				Concurrent: 0,
			},
		},
	}
	BandwidthValid1 := QemuDiskBandwidth{
		Data: QemuDiskBandwidthData{
			ReadLimit: QemuDiskBandwidthDataLimit{
				Burst:      1,
				Concurrent: 1,
			},
			WriteLimit: QemuDiskBandwidthDataLimit{
				Burst:      1,
				Concurrent: 1,
			},
		},
		Iops: QemuDiskBandwidthIops{
			ReadLimit: QemuDiskBandwidthIopsLimit{
				Burst:      10,
				Concurrent: 10,
			},
			WriteLimit: QemuDiskBandwidthIopsLimit{
				Burst:      10,
				Concurrent: 10,
			},
		},
	}
	BandwidthValid2 := QemuDiskBandwidth{
		Data: QemuDiskBandwidthData{
			ReadLimit: QemuDiskBandwidthDataLimit{
				Burst:      1,
				Concurrent: 0,
			},
			WriteLimit: QemuDiskBandwidthDataLimit{
				Burst:      1,
				Concurrent: 0,
			},
		},
		Iops: QemuDiskBandwidthIops{
			ReadLimit: QemuDiskBandwidthIopsLimit{
				Burst:      10,
				Concurrent: 0,
			},
			WriteLimit: QemuDiskBandwidthIopsLimit{
				Burst:      10,
				Concurrent: 0,
			},
		},
	}
	BandwidthValid3 := QemuDiskBandwidth{
		Data: QemuDiskBandwidthData{
			ReadLimit: QemuDiskBandwidthDataLimit{
				Burst:      0,
				Concurrent: 1,
			},
			WriteLimit: QemuDiskBandwidthDataLimit{
				Burst:      0,
				Concurrent: 1,
			},
		},
		Iops: QemuDiskBandwidthIops{
			ReadLimit: QemuDiskBandwidthIopsLimit{
				Burst:      0,
				Concurrent: 10,
			},
			WriteLimit: QemuDiskBandwidthIopsLimit{
				Burst:      0,
				Concurrent: 10,
			},
		},
	}
	validCloudInit := QemuCloudInitDisk{Format: QemuDiskFormat_Raw, Storage: "Test"}
	testData := []struct {
		name  string
		input ConfigQemu
		err   error
	}{
		// Valid
		// Valid Disks
		{name: "Valid Disks Empty 0",
			input: ConfigQemu{Disks: &QemuStorages{}},
		},
		{name: "Valid Disks Empty 1",
			input: ConfigQemu{Disks: &QemuStorages{
				Ide:    &QemuIdeDisks{Disk_0: &QemuIdeStorage{}},
				Sata:   &QemuSataDisks{Disk_0: &QemuSataStorage{}},
				Scsi:   &QemuScsiDisks{Disk_0: &QemuScsiStorage{}},
				VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{}},
			}},
		},
		// Valid Disks CdRom
		{name: "Valid Disks CdRom",
			input: ConfigQemu{Disks: &QemuStorages{
				Ide:    &QemuIdeDisks{Disk_0: &QemuIdeStorage{CdRom: &QemuCdRom{}}},
				Sata:   &QemuSataDisks{Disk_0: &QemuSataStorage{CdRom: &QemuCdRom{Iso: &IsoFile{File: "test", Storage: "test"}}}},
				Scsi:   &QemuScsiDisks{Disk_0: &QemuScsiStorage{CdRom: &QemuCdRom{Passthrough: true}}},
				VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{CdRom: &QemuCdRom{Iso: &IsoFile{File: "test", Storage: "test"}}}},
			}},
		},
		// Valid Disks CloudInit
		{name: "Valid Disks CloudInit Ide",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{CloudInit: &validCloudInit}}}},
		},
		{name: "Valid Disks CloudInit Sata",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{CloudInit: &validCloudInit}}}},
		},
		{name: "Valid Disks CloudInit Scsi",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_0: &QemuScsiStorage{CloudInit: &validCloudInit}}}},
		},
		{name: "Valid Disks CloudInit VirtIO",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{CloudInit: &validCloudInit}}}},
		},
		// Valid Disks Disk
		{name: "Valid Disks Disk",
			input: ConfigQemu{Disks: &QemuStorages{
				Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Disk: &QemuIdeDisk{
					AsyncIO:   QemuDiskAsyncIO_IOuring,
					Bandwidth: BandwidthValid0,
					Cache:     QemuDiskCache_DirectSync,
					Format:    QemuDiskFormat_Raw,
					Size:      32,
					Storage:   "test",
				}}},
				Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{Disk: &QemuSataDisk{
					AsyncIO:   QemuDiskAsyncIO_Native,
					Bandwidth: BandwidthValid1,
					Cache:     QemuDiskCache_None,
					Format:    QemuDiskFormat_Cow,
					Size:      1,
					Storage:   "test",
				}}},
				Scsi: &QemuScsiDisks{Disk_0: &QemuScsiStorage{Disk: &QemuScsiDisk{
					AsyncIO:   QemuDiskAsyncIO_Threads,
					Bandwidth: BandwidthValid2,
					Cache:     QemuDiskCache_WriteBack,
					Format:    QemuDiskFormat_Qcow2,
					Size:      10,
					Storage:   "test",
				}}},
				VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
					AsyncIO:   "",
					Bandwidth: BandwidthValid3,
					Cache:     "",
					Format:    QemuDiskFormat_Vmdk,
					Size:      1024,
					Storage:   "test",
				}}},
			}},
		},
		// Valid Disks Passthrough
		{name: "Valid Disks Passthrough",
			input: ConfigQemu{Disks: &QemuStorages{
				Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{
					AsyncIO:   QemuDiskAsyncIO_IOuring,
					Bandwidth: BandwidthValid3,
					Cache:     QemuDiskCache_DirectSync,
					File:      "test",
				}}},
				Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{Passthrough: &QemuSataPassthrough{
					AsyncIO:   QemuDiskAsyncIO_Native,
					Bandwidth: BandwidthValid2,
					Cache:     "",
					File:      "test",
				}}},
				Scsi: &QemuScsiDisks{Disk_0: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{
					AsyncIO:   QemuDiskAsyncIO_Threads,
					Bandwidth: BandwidthValid1,
					Cache:     QemuDiskCache_WriteBack,
					File:      "test",
				}}},
				VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{
					AsyncIO:   "",
					Bandwidth: BandwidthValid0,
					Cache:     QemuDiskCache_WriteThrough,
					File:      "test",
				}}},
			}},
		},
		// Invalid
		// Invalid Disks Mutually exclusive Ide
		{name: "Invalid Disks MutuallyExclusive Ide 0",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{
				CdRom:     &QemuCdRom{},
				CloudInit: &QemuCloudInitDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Ide 1",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{
				CdRom: &QemuCdRom{},
				Disk:  &QemuIdeDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Ide 2",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{
				CdRom:       &QemuCdRom{},
				Passthrough: &QemuIdePassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Ide 3",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{
				CloudInit: &QemuCloudInitDisk{},
				Disk:      &QemuIdeDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Ide 4",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{
				CloudInit:   &QemuCloudInitDisk{},
				Passthrough: &QemuIdePassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Ide 5",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{
				Disk:        &QemuIdeDisk{},
				Passthrough: &QemuIdePassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Ide 6",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{
				CdRom:     &QemuCdRom{},
				CloudInit: &QemuCloudInitDisk{},
				Disk:      &QemuIdeDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Ide 7",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{
				CloudInit:   &QemuCloudInitDisk{},
				Disk:        &QemuIdeDisk{},
				Passthrough: &QemuIdePassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Ide 8",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{
				CdRom:       &QemuCdRom{},
				Disk:        &QemuIdeDisk{},
				Passthrough: &QemuIdePassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Ide 9",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{
				CdRom:       &QemuCdRom{},
				CloudInit:   &QemuCloudInitDisk{},
				Passthrough: &QemuIdePassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Ide 10",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{
				CdRom:       &QemuCdRom{},
				CloudInit:   &QemuCloudInitDisk{},
				Disk:        &QemuIdeDisk{},
				Passthrough: &QemuIdePassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		// Invalid Disks Mutually exclusive Sata
		{name: "Invalid Disks MutuallyExclusive Sata 0",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{
				CdRom:     &QemuCdRom{},
				CloudInit: &QemuCloudInitDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Sata 1",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{
				CdRom: &QemuCdRom{},
				Disk:  &QemuSataDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Sata 2",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{
				CdRom:       &QemuCdRom{},
				Passthrough: &QemuSataPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Sata 3",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_3: &QemuSataStorage{
				CloudInit: &QemuCloudInitDisk{},
				Disk:      &QemuSataDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Sata 4",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_4: &QemuSataStorage{
				CloudInit:   &QemuCloudInitDisk{},
				Passthrough: &QemuSataPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Sata 5",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_5: &QemuSataStorage{
				Disk:        &QemuSataDisk{},
				Passthrough: &QemuSataPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Sata 6",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{
				CdRom:     &QemuCdRom{},
				CloudInit: &QemuCloudInitDisk{},
				Disk:      &QemuSataDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Sata 7",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{
				CloudInit:   &QemuCloudInitDisk{},
				Disk:        &QemuSataDisk{},
				Passthrough: &QemuSataPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Sata 8",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{
				CdRom:       &QemuCdRom{},
				Disk:        &QemuSataDisk{},
				Passthrough: &QemuSataPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Sata 9",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_3: &QemuSataStorage{
				CdRom:       &QemuCdRom{},
				CloudInit:   &QemuCloudInitDisk{},
				Passthrough: &QemuSataPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Sata 10",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_4: &QemuSataStorage{
				CdRom:       &QemuCdRom{},
				CloudInit:   &QemuCloudInitDisk{},
				Disk:        &QemuSataDisk{},
				Passthrough: &QemuSataPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		// Invalid Disks Mutually exclusive Scsi
		{name: "Invalid Disks MutuallyExclusive Scsi 0",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_0: &QemuScsiStorage{
				CdRom:     &QemuCdRom{},
				CloudInit: &QemuCloudInitDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Scsi 1",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_1: &QemuScsiStorage{
				CdRom: &QemuCdRom{},
				Disk:  &QemuScsiDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Scsi 2",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_2: &QemuScsiStorage{
				CdRom:       &QemuCdRom{},
				Passthrough: &QemuScsiPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Scsi 3",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_3: &QemuScsiStorage{
				CloudInit: &QemuCloudInitDisk{},
				Disk:      &QemuScsiDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Scsi 4",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_4: &QemuScsiStorage{
				CloudInit:   &QemuCloudInitDisk{},
				Passthrough: &QemuScsiPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Scsi 5",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_5: &QemuScsiStorage{
				Disk:        &QemuScsiDisk{},
				Passthrough: &QemuScsiPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Scsi 6",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_6: &QemuScsiStorage{
				CdRom:     &QemuCdRom{},
				CloudInit: &QemuCloudInitDisk{},
				Disk:      &QemuScsiDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Scsi 7",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_7: &QemuScsiStorage{
				CloudInit:   &QemuCloudInitDisk{},
				Disk:        &QemuScsiDisk{},
				Passthrough: &QemuScsiPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Scsi 8",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_8: &QemuScsiStorage{
				CdRom:       &QemuCdRom{},
				Disk:        &QemuScsiDisk{},
				Passthrough: &QemuScsiPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Scsi 9",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_9: &QemuScsiStorage{
				CdRom:       &QemuCdRom{},
				CloudInit:   &QemuCloudInitDisk{},
				Passthrough: &QemuScsiPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Scsi 10",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_10: &QemuScsiStorage{
				CdRom:       &QemuCdRom{},
				CloudInit:   &QemuCloudInitDisk{},
				Disk:        &QemuScsiDisk{},
				Passthrough: &QemuScsiPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		// Invalid Disks Mutually exclusive VirtIO
		{name: "Invalid Disks MutuallyExclusive VirtIO 0",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{
				CdRom:     &QemuCdRom{},
				CloudInit: &QemuCloudInitDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive VirtIO 1",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_1: &QemuVirtIOStorage{
				CdRom: &QemuCdRom{},
				Disk:  &QemuVirtIODisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive VirtIO 2",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_2: &QemuVirtIOStorage{
				CdRom:       &QemuCdRom{},
				Passthrough: &QemuVirtIOPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive VirtIO 3",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_3: &QemuVirtIOStorage{
				CloudInit: &QemuCloudInitDisk{},
				Disk:      &QemuVirtIODisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive VirtIO 4",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_4: &QemuVirtIOStorage{
				CloudInit:   &QemuCloudInitDisk{},
				Passthrough: &QemuVirtIOPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive VirtIO 5",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_5: &QemuVirtIOStorage{
				Disk:        &QemuVirtIODisk{},
				Passthrough: &QemuVirtIOPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive VirtIO 6",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_6: &QemuVirtIOStorage{
				CdRom:     &QemuCdRom{},
				CloudInit: &QemuCloudInitDisk{},
				Disk:      &QemuVirtIODisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive VirtIO 7",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_7: &QemuVirtIOStorage{
				CloudInit:   &QemuCloudInitDisk{},
				Disk:        &QemuVirtIODisk{},
				Passthrough: &QemuVirtIOPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive VirtIO 8",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_8: &QemuVirtIOStorage{
				CdRom:       &QemuCdRom{},
				Disk:        &QemuVirtIODisk{},
				Passthrough: &QemuVirtIOPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive VirtIO 9",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_9: &QemuVirtIOStorage{
				CdRom:       &QemuCdRom{},
				CloudInit:   &QemuCloudInitDisk{},
				Passthrough: &QemuVirtIOPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive VirtIO 10",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_10: &QemuVirtIOStorage{
				CdRom:       &QemuCdRom{},
				CloudInit:   &QemuCloudInitDisk{},
				Disk:        &QemuVirtIODisk{},
				Passthrough: &QemuVirtIOPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		// Invalid Disks CdRom Ide
		{name: "Invalid Disks CdRom Ide errors.New(Error_IsoFile_File) 0",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{CdRom: &QemuCdRom{Iso: &IsoFile{}}}}}},
			err:   errors.New(Error_IsoFile_File),
		},
		{name: "Invalid Disks CdRom Ide errors.New(Error_IsoFile_File) 1",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{CdRom: &QemuCdRom{Iso: &IsoFile{Storage: "test"}}}}}},
			err:   errors.New(Error_IsoFile_File),
		},
		{name: "Invalid Disks CdRom Ide errors.New(Error_IsoFile_Storage)",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{CdRom: &QemuCdRom{Iso: &IsoFile{File: "test"}}}}}},
			err:   errors.New(Error_IsoFile_Storage),
		},
		{name: "Invalid Disks CdRom Ide errors.New(Error_QemuCdRom_MutuallyExclusive)",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{CdRom: &QemuCdRom{Iso: &IsoFile{File: "test", Storage: "test"}, Passthrough: true}}}}},
			err:   errors.New(Error_QemuCdRom_MutuallyExclusive),
		},
		// Invalid Disks CdRom Sata
		{name: "Invalid Disks CdRom Sata errors.New(Error_IsoFile_File) 0",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{CdRom: &QemuCdRom{Iso: &IsoFile{}}}}}},
			err:   errors.New(Error_IsoFile_File),
		},
		{name: "Invalid Disks CdRom Sata errors.New(Error_IsoFile_File) 1",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{CdRom: &QemuCdRom{Iso: &IsoFile{Storage: "test"}}}}}},
			err:   errors.New(Error_IsoFile_File),
		},
		{name: "Invalid Disks CdRom Sata errors.New(Error_IsoFile_Storage)",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{CdRom: &QemuCdRom{Iso: &IsoFile{File: "test"}}}}}},
			err:   errors.New(Error_IsoFile_Storage),
		},
		{name: "Invalid Disks CdRom Sata errors.New(Error_QemuCdRom_MutuallyExclusive)",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_3: &QemuSataStorage{CdRom: &QemuCdRom{Iso: &IsoFile{File: "test", Storage: "test"}, Passthrough: true}}}}},
			err:   errors.New(Error_QemuCdRom_MutuallyExclusive),
		},
		// Invalid Disks CdRom Scsi
		{name: "Invalid Disks CdRom Scsi errors.New(Error_IsoFile_File) 0",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_0: &QemuScsiStorage{CdRom: &QemuCdRom{Iso: &IsoFile{}}}}}},
			err:   errors.New(Error_IsoFile_File),
		},
		{name: "Invalid Disks CdRom Scsi errors.New(Error_IsoFile_File) 1",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_2: &QemuScsiStorage{CdRom: &QemuCdRom{Iso: &IsoFile{Storage: "test"}}}}}},
			err:   errors.New(Error_IsoFile_File),
		},
		{name: "Invalid Disks CdRom Scsi errors.New(Error_IsoFile_Storage)",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_1: &QemuScsiStorage{CdRom: &QemuCdRom{Iso: &IsoFile{File: "test"}}}}}},
			err:   errors.New(Error_IsoFile_Storage),
		},
		{name: "Invalid Disks CdRom Scsi errors.New(Error_QemuCdRom_MutuallyExclusive)",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_3: &QemuScsiStorage{CdRom: &QemuCdRom{Iso: &IsoFile{File: "test", Storage: "test"}, Passthrough: true}}}}},
			err:   errors.New(Error_QemuCdRom_MutuallyExclusive),
		},
		// Invalid Disks CdRom VirtIO
		{name: "Invalid Disks CdRom VirtIO errors.New(Error_IsoFile_File) 0",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{CdRom: &QemuCdRom{Iso: &IsoFile{}}}}}},
			err:   errors.New(Error_IsoFile_File),
		},
		{name: "Invalid Disks CdRom VirtIO errors.New(Error_IsoFile_File) 1",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_2: &QemuVirtIOStorage{CdRom: &QemuCdRom{Iso: &IsoFile{Storage: "test"}}}}}},
			err:   errors.New(Error_IsoFile_File),
		},
		{name: "Invalid Disks CdRom VirtIO errors.New(Error_IsoFile_Storage)",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_1: &QemuVirtIOStorage{CdRom: &QemuCdRom{Iso: &IsoFile{File: "test"}}}}}},
			err:   errors.New(Error_IsoFile_Storage),
		},
		{name: "Invalid Disks CdRom VirtIO errors.New(Error_QemuCdRom_MutuallyExclusive)",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_3: &QemuVirtIOStorage{CdRom: &QemuCdRom{Iso: &IsoFile{File: "test", Storage: "test"}, Passthrough: true}}}}},
			err:   errors.New(Error_QemuCdRom_MutuallyExclusive),
		},
		// Invalid Disks CloudInit Duplicate
		{name: "Invalid Disks CloudInit Duplicate errors.New(Error_QemuCloudInitDisk_OnlyOne)",
			input: ConfigQemu{Disks: &QemuStorages{
				Ide:    &QemuIdeDisks{Disk_0: &QemuIdeStorage{CloudInit: &validCloudInit}},
				Sata:   &QemuSataDisks{Disk_0: &QemuSataStorage{CloudInit: &validCloudInit}},
				Scsi:   &QemuScsiDisks{Disk_0: &QemuScsiStorage{CloudInit: &validCloudInit}},
				VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{CloudInit: &validCloudInit}},
			}},
			err: errors.New(Error_QemuCloudInitDisk_OnlyOne),
		},
		{name: "Invalid Disks CloudInit Duplicate Ide errors.New(Error_QemuCloudInitDisk_OnlyOne)",
			input: ConfigQemu{Disks: &QemuStorages{
				Ide: &QemuIdeDisks{
					Disk_0: &QemuIdeStorage{CloudInit: &validCloudInit},
					Disk_1: &QemuIdeStorage{CloudInit: &validCloudInit},
				},
			}},
			err: errors.New(Error_QemuCloudInitDisk_OnlyOne),
		},
		{name: "Invalid Disks CloudInit Duplicate Sata errors.New(Error_QemuCloudInitDisk_OnlyOne)",
			input: ConfigQemu{Disks: &QemuStorages{
				Sata: &QemuSataDisks{
					Disk_0: &QemuSataStorage{CloudInit: &validCloudInit},
					Disk_1: &QemuSataStorage{CloudInit: &validCloudInit},
				},
			}},
			err: errors.New(Error_QemuCloudInitDisk_OnlyOne),
		},
		{name: "Invalid Disks CloudInit Duplicate Scsi errors.New(Error_QemuCloudInitDisk_OnlyOne)",
			input: ConfigQemu{Disks: &QemuStorages{
				Scsi: &QemuScsiDisks{
					Disk_0: &QemuScsiStorage{CloudInit: &validCloudInit},
					Disk_1: &QemuScsiStorage{CloudInit: &validCloudInit},
				},
			}},
			err: errors.New(Error_QemuCloudInitDisk_OnlyOne),
		},
		{name: "Invalid Disks CloudInit Duplicate VirtIO errors.New(Error_QemuCloudInitDisk_OnlyOne)",
			input: ConfigQemu{Disks: &QemuStorages{
				VirtIO: &QemuVirtIODisks{
					Disk_0: &QemuVirtIOStorage{CloudInit: &validCloudInit},
					Disk_1: &QemuVirtIOStorage{CloudInit: &validCloudInit},
				},
			}},
			err: errors.New(Error_QemuCloudInitDisk_OnlyOne),
		},
		// Invalid Disks CloudInit Ide
		{name: `Invalid Disks CloudInit Ide QemuDiskFormat("").Error() 0`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{CloudInit: &QemuCloudInitDisk{}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks CloudInit Ide QemuDiskFormat("").Error() 1`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{CloudInit: &QemuCloudInitDisk{Storage: "test"}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks CloudInit Ide errors.New(Error_QemuCloudInitDisk_Storage)`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{CloudInit: &QemuCloudInitDisk{Format: QemuDiskFormat_Raw}}}}},
			err:   errors.New(Error_QemuCloudInitDisk_Storage),
		},
		// Invalid Disks CloudInit Sata
		{name: `Invalid Disks CloudInit Sata QemuDiskFormat("").Error() 0`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{CloudInit: &QemuCloudInitDisk{}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks CloudInit Sata QemuDiskFormat("").Error() 1`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{CloudInit: &QemuCloudInitDisk{Storage: "test"}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks CloudInit Sata errors.New(Error_QemuCloudInitDisk_Storage)`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{CloudInit: &QemuCloudInitDisk{Format: QemuDiskFormat_Raw}}}}},
			err:   errors.New(Error_QemuCloudInitDisk_Storage),
		},
		// Invalid Disks CloudInit Scsi
		{name: `Invalid Disks CloudInit Scsi QemuDiskFormat("").Error() 0`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_0: &QemuScsiStorage{CloudInit: &QemuCloudInitDisk{}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks CloudInit Scsi QemuDiskFormat("").Error() 1`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_1: &QemuScsiStorage{CloudInit: &QemuCloudInitDisk{Storage: "test"}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks CloudInit Scsi errors.New(Error_QemuCloudInitDisk_Storage)`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_2: &QemuScsiStorage{CloudInit: &QemuCloudInitDisk{Format: QemuDiskFormat_Raw}}}}},
			err:   errors.New(Error_QemuCloudInitDisk_Storage),
		},
		// Invalid Disks CloudInit VirtIO
		{name: `Invalid Disks CloudInit VirtIO QemuDiskFormat("").Error() 0`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{CloudInit: &QemuCloudInitDisk{}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks CloudInit VirtIO QemuDiskFormat("").Error() 1`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_1: &QemuVirtIOStorage{CloudInit: &QemuCloudInitDisk{Storage: "test"}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks CloudInit VirtIO errors.New(Error_QemuCloudInitDisk_Storage)`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_2: &QemuVirtIOStorage{CloudInit: &QemuCloudInitDisk{Format: QemuDiskFormat_Raw}}}}},
			err:   errors.New(Error_QemuCloudInitDisk_Storage),
		},
		// Invalid Disks Disk Ide
		{name: `Invalid Disks Disk Ide QemuDiskFormat("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Disk: &QemuIdeDisk{}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks Disk Ide QemuDiskAsyncIO("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Disk: &QemuIdeDisk{AsyncIO: "invalid"}}}}},
			err:   QemuDiskAsyncIO("").Error(),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{Disk: &QemuIdeDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{Disk: &QemuIdeDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Disk: &QemuIdeDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Disk: &QemuIdeDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{Disk: &QemuIdeDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 9}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{Disk: &QemuIdeDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 8}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Disk: &QemuIdeDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 7}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Disk: &QemuIdeDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 6}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Ide QemuDiskCache("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{Disk: &QemuIdeDisk{Cache: "invalid"}}}}},
			err:   QemuDiskCache("").Error(),
		},
		{name: `Invalid Disks Disk Ide QemuDiskFormat("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{Disk: &QemuIdeDisk{Format: ""}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDiskSerial_IllegalCharacter)`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Format: QemuDiskFormat_Raw,
				Serial: "!@^$^&$^&"},
			}}}},
			err: errors.New(Error_QemuDiskSerial_IllegalCharacter),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDiskSerial_IllegalLength)`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Format: QemuDiskFormat_Raw,
				Serial: QemuDiskSerial(test_data_qemu.QemuDiskSerial_Max_Illegal()),
			}}}}},
			err: errors.New(Error_QemuDiskSerial_IllegalLength),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDisk_Size)`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Format: QemuDiskFormat_Raw,
				Size:   0,
			}}}}},
			err: errors.New(Error_QemuDisk_Size),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDisk_Storage)`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Format:  QemuDiskFormat_Raw,
				Size:    32,
				Storage: "",
			}}}}},
			err: errors.New(Error_QemuDisk_Storage),
		},
		// Invalid Disks Disk Sata
		{name: `Invalid Disks Disk Sata QemuDiskFormat("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{Disk: &QemuSataDisk{}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks Disk Sata QemuDiskAsyncIO("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{Disk: &QemuSataDisk{AsyncIO: "invalid"}}}}},
			err:   QemuDiskAsyncIO("").Error(),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{Disk: &QemuSataDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_3: &QemuSataStorage{Disk: &QemuSataDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_4: &QemuSataStorage{Disk: &QemuSataDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_5: &QemuSataStorage{Disk: &QemuSataDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{Disk: &QemuSataDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 9}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{Disk: &QemuSataDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 8}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{Disk: &QemuSataDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 7}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_3: &QemuSataStorage{Disk: &QemuSataDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 6}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Sata QemuDiskCache("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_4: &QemuSataStorage{Disk: &QemuSataDisk{Cache: "invalid"}}}}},
			err:   QemuDiskCache("").Error(),
		},
		{name: `Invalid Disks Disk Sata QemuDiskFormat("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_5: &QemuSataStorage{Disk: &QemuSataDisk{Format: ""}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDiskSerial_IllegalCharacter)`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{Disk: &QemuSataDisk{
				Format: QemuDiskFormat_Raw,
				Serial: "!@^$^&$^&"},
			}}}},
			err: errors.New(Error_QemuDiskSerial_IllegalCharacter),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDiskSerial_IllegalLength)`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{Disk: &QemuSataDisk{
				Format: QemuDiskFormat_Raw,
				Serial: QemuDiskSerial(test_data_qemu.QemuDiskSerial_Max_Illegal()),
			}}}}},
			err: errors.New(Error_QemuDiskSerial_IllegalLength),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDisk_Size)`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{Disk: &QemuSataDisk{
				Format: QemuDiskFormat_Raw,
				Size:   0,
			}}}}},
			err: errors.New(Error_QemuDisk_Size),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDisk_Storage)`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_3: &QemuSataStorage{Disk: &QemuSataDisk{
				Format:  QemuDiskFormat_Raw,
				Size:    32,
				Storage: "",
			}}}}},
			err: errors.New(Error_QemuDisk_Storage),
		},
		// Invalid Disks Disk Scsi
		{name: `Invalid Disks Disk Scsi QemuDiskFormat("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_0: &QemuScsiStorage{Disk: &QemuScsiDisk{}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks Disk Scsi QemuDiskAsyncIO("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_1: &QemuScsiStorage{Disk: &QemuScsiDisk{AsyncIO: "invalid"}}}}},
			err:   QemuDiskAsyncIO("").Error(),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_2: &QemuScsiStorage{Disk: &QemuScsiDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_3: &QemuScsiStorage{Disk: &QemuScsiDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_4: &QemuScsiStorage{Disk: &QemuScsiDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_5: &QemuScsiStorage{Disk: &QemuScsiDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_6: &QemuScsiStorage{Disk: &QemuScsiDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 9}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_7: &QemuScsiStorage{Disk: &QemuScsiDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 8}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_8: &QemuScsiStorage{Disk: &QemuScsiDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 7}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_9: &QemuScsiStorage{Disk: &QemuScsiDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 6}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Scsi QemuDiskCache("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_10: &QemuScsiStorage{Disk: &QemuScsiDisk{Cache: "invalid"}}}}},
			err:   QemuDiskCache("").Error(),
		},
		{name: `Invalid Disks Disk Scsi QemuDiskFormat("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_11: &QemuScsiStorage{Disk: &QemuScsiDisk{Format: ""}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDiskSerial_IllegalCharacter)`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_12: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Format: QemuDiskFormat_Raw,
				Serial: "!@^$^&$^&"},
			}}}},
			err: errors.New(Error_QemuDiskSerial_IllegalCharacter),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDiskSerial_IllegalLength)`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_13: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Format: QemuDiskFormat_Raw,
				Serial: QemuDiskSerial(test_data_qemu.QemuDiskSerial_Max_Illegal()),
			}}}}},
			err: errors.New(Error_QemuDiskSerial_IllegalLength),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDisk_Size)`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_14: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Format: QemuDiskFormat_Raw,
				Size:   0,
			}}}}},
			err: errors.New(Error_QemuDisk_Size),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDisk_Storage)`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_15: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Format:  QemuDiskFormat_Raw,
				Size:    32,
				Storage: "",
			}}}}},
			err: errors.New(Error_QemuDisk_Storage),
		},
		// Invalid Disks Disk VirtIO
		{name: `Invalid Disks Disk VirtIO QemuDiskFormat("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks Disk VirtIO QemuDiskAsyncIO("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_1: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{AsyncIO: "invalid"}}}}},
			err:   QemuDiskAsyncIO("").Error(),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_2: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_3: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_4: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_5: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_6: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 9}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_7: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 8}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_8: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 7}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_9: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 6}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Disk VirtIO QemuDiskCache("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_10: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{Cache: "invalid"}}}}},
			err:   QemuDiskCache("").Error(),
		},
		{name: `Invalid Disks Disk VirtIO QemuDiskFormat("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_11: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{Format: ""}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDiskSerial_IllegalCharacter)`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_12: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Format: QemuDiskFormat_Raw,
				Serial: "!@^$^&$^&"},
			}}}},
			err: errors.New(Error_QemuDiskSerial_IllegalCharacter),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDiskSerial_IllegalLength)`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_13: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Format: QemuDiskFormat_Raw,
				Serial: QemuDiskSerial(test_data_qemu.QemuDiskSerial_Max_Illegal()),
			}}}}},
			err: errors.New(Error_QemuDiskSerial_IllegalLength),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDisk_Size)`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_14: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Format: QemuDiskFormat_Raw,
				Size:   0,
			}}}}},
			err: errors.New(Error_QemuDisk_Size),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDisk_Storage)`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_15: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Format:  QemuDiskFormat_Raw,
				Size:    32,
				Storage: "",
			}}}}},
			err: errors.New(Error_QemuDisk_Storage),
		},
		// Invalid Disks Passthrough Ide
		{name: `Invalid Disks Passthrough Ide QemuDiskAsyncIO("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{AsyncIO: "invalid"}}}}},
			err:   QemuDiskAsyncIO("").Error(),
		},
		{name: `Invalid Disks Passthrough Ide errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Ide errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Ide errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Ide errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Ide errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 9}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Ide errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 8}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Ide errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 7}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Ide errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 6}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Ide QemuDiskCache("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{Cache: "invalid"}}}}},
			err:   QemuDiskCache("").Error(),
		},
		{name: `Invalid Disks Passthrough Ide errors.New(Error_QemuDisk_File)`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{File: ""}}}}},
			err:   errors.New(Error_QemuDisk_File),
		},
		{name: `Invalid Disks Passthrough Ide errors.New(Error_QemuDiskSerial_IllegalCharacter)`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{File: "/dev/disk/by-id/scsi1", Serial: "!@^$^&$^&"}}}}},
			err:   errors.New(Error_QemuDiskSerial_IllegalCharacter),
		},
		{name: `Invalid Disks Passthrough Ide errors.New(Error_QemuDiskSerial_IllegalLength)`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{File: "/dev/disk/by-id/scsi1", Serial: QemuDiskSerial(test_data_qemu.QemuDiskSerial_Max_Illegal())}}}}},
			err:   errors.New(Error_QemuDiskSerial_IllegalLength),
		},
		// Invalid Disks Passthrough Sata
		{name: `Invalid Disks Passthrough Sata QemuDiskAsyncIO("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{Passthrough: &QemuSataPassthrough{AsyncIO: "invalid"}}}}},
			err:   QemuDiskAsyncIO("").Error(),
		},
		{name: `Invalid Disks Passthrough Sata errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{Passthrough: &QemuSataPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Sata errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{Passthrough: &QemuSataPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Sata errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_3: &QemuSataStorage{Passthrough: &QemuSataPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Sata errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_4: &QemuSataStorage{Passthrough: &QemuSataPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Sata errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_5: &QemuSataStorage{Passthrough: &QemuSataPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 9}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Sata errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{Passthrough: &QemuSataPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 8}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Sata errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{Passthrough: &QemuSataPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 7}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Sata errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{Passthrough: &QemuSataPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 6}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Sata QemuDiskCache("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_3: &QemuSataStorage{Passthrough: &QemuSataPassthrough{Cache: "invalid"}}}}},
			err:   QemuDiskCache("").Error(),
		},
		{name: `Invalid Disks Passthrough Sata errors.New(Error_QemuDisk_File)`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_4: &QemuSataStorage{Passthrough: &QemuSataPassthrough{File: ""}}}}},
			err:   errors.New(Error_QemuDisk_File),
		},
		{name: `Invalid Disks Passthrough Sata errors.New(Error_QemuDiskSerial_IllegalCharacter)`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_5: &QemuSataStorage{Passthrough: &QemuSataPassthrough{File: "/dev/disk/by-id/scsi1", Serial: "!@^$^&$^&"}}}}},
			err:   errors.New(Error_QemuDiskSerial_IllegalCharacter),
		},
		{name: `Invalid Disks Passthrough Sata errors.New(Error_QemuDiskSerial_IllegalLength)`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{Passthrough: &QemuSataPassthrough{File: "/dev/disk/by-id/scsi1", Serial: QemuDiskSerial(test_data_qemu.QemuDiskSerial_Max_Illegal())}}}}},
			err:   errors.New(Error_QemuDiskSerial_IllegalLength),
		},
		// Invalid Disks Passthrough Scsi
		{name: `Invalid Disks Passthrough Scsi QemuDiskAsyncIO("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_0: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{AsyncIO: "invalid"}}}}},
			err:   QemuDiskAsyncIO("").Error(),
		},
		{name: `Invalid Disks Passthrough Scsi errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_1: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Scsi errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_2: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Scsi errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_3: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Scsi errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_4: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Scsi errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_5: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 9}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Scsi errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_6: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 8}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Scsi errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_7: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 7}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Scsi errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_8: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 6}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Scsi QemuDiskCache("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_9: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{Cache: "invalid"}}}}},
			err:   QemuDiskCache("").Error(),
		},
		{name: `Invalid Disks Passthrough Scsi errors.New(Error_QemuDisk_File)`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_10: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{File: ""}}}}},
			err:   errors.New(Error_QemuDisk_File),
		},
		{name: `Invalid Disks Passthrough Scsi errors.New(Error_QemuDiskSerial_IllegalCharacter)`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_11: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{File: "/dev/disk/by-id/scsi1", Serial: "!@^$^&$^&"}}}}},
			err:   errors.New(Error_QemuDiskSerial_IllegalCharacter),
		},
		{name: `Invalid Disks Passthrough Scsi errors.New(Error_QemuDiskSerial_IllegalLength)`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_12: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{File: "/dev/disk/by-id/scsi1", Serial: QemuDiskSerial(test_data_qemu.QemuDiskSerial_Max_Illegal())}}}}},
			err:   errors.New(Error_QemuDiskSerial_IllegalLength),
		},
		// Invalid Disks Passthrough VirtIO
		{name: `Invalid Disks Passthrough VirtIO QemuDiskAsyncIO("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{AsyncIO: "invalid"}}}}},
			err:   QemuDiskAsyncIO("").Error(),
		},
		{name: `Invalid Disks Passthrough VirtIO errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_1: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Passthrough VirtIO errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_2: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough VirtIO errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_3: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Passthrough VirtIO errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_4: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough VirtIO errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_5: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 9}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Passthrough VirtIO errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_6: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 8}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough VirtIO errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_7: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 7}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Passthrough VirtIO errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_8: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 6}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough VirtIO QemuDiskCache("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_9: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{Cache: "invalid"}}}}},
			err:   QemuDiskCache("").Error(),
		},
		{name: `Invalid Disks Passthrough VirtIO errors.New(Error_QemuDisk_File)`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_10: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{File: ""}}}}},
			err:   errors.New(Error_QemuDisk_File),
		},
		{name: `Invalid Disks Passthrough VirtIO errors.New(Error_QemuDiskSerial_IllegalCharacter)`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_11: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{File: "/dev/disk/by-id/scsi1", Serial: "!@^$^&$^&"}}}}},
			err:   errors.New(Error_QemuDiskSerial_IllegalCharacter),
		},
		{name: `Invalid Disks Passthrough VirtIO errors.New(Error_QemuDiskSerial_IllegalLength)`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_12: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{File: "/dev/disk/by-id/scsi1", Serial: QemuDiskSerial(test_data_qemu.QemuDiskSerial_Max_Illegal())}}}}},
			err:   errors.New(Error_QemuDiskSerial_IllegalLength),
		},
	}
	for _, test := range testData {
		t.Run(test.name, func(*testing.T) {
			if test.err != nil {
				require.Equal(t, test.input.Validate(), test.err, test.name)
			} else {
				require.NoError(t, test.input.Validate(), test.name)
			}
		})
	}
}

// Test the encoding logic to encode the ssh keys
func Test_sshKeyUrlEncode(t *testing.T) {
	input := test_sshKeyUrlEncode_Input()
	output := test_sshKeyUrlEncode_Output()
	test := sshKeyUrlEncode(input)
	require.Equal(t, output, test)
}

func test_sshKeyUrlEncode_Input() string {
	keys := []string{
		"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDT7lsC9gTAjL0FUPlHqnz71TzqDMdsdHhWu54M7NN4E9KNzKwzUy1h6ZuOMm+d0nWX+yuT2Mfzi8NaKe5ATg0bwmrzZ1ikS/tGs7v/TyMSBOlmrS5v0g8rn40bphCqnNeNcfP9JR2zyq4UccpdIYA62t6Ky9d/WBbsAQRESwZVhpU9JGhwnVHFcNN5svlDwz9wzW1a2J2/E76+vym+3Rt4W9s3MqQZdbHozo4N43puXq7PH1tTr/RT84uaMF4XLx1CUm+bMZLgtac8sHl1DJz4gC3MLasD6UXZzRz99K+QAHD6YsXHDwdWu6QAkqzS0DNDbm0E618wn4GEZAJJhehh test@VScode",
		"ssh-dss AAAAB3NzaC1kc3MAAACBAN6VwM2CMPrpz0CT8z4UP5we4Jt1MSDHumArdzTaxaqtAcV6Z+a4ZO/0geqEDZJSideX7Iq8zYrzdXGXfR+8N5GHoz49mVFit101cKAvcwZhzVeXQ1Cc8Zyjk53qmjWiNonfsjxP9VorNjjb/zGnA3ZnazflfyzqwEr8fV7JtUwjAAAAFQDlk3FT+QmsKiiBjBuekwyFeVzwiwAAAIBeAlzP9hsVeEbPjEjkxi9/hVgNQE8xtuUMZUCq7NOu5RlGzPHStzh8ByMh0Jsly0GbVHUfM84ikSpU/L5O3j75vq+cng77mezAGWfHfBpAL+whKfXvYHy0mqb0M1krzbdRbQkt9TV4gNw+Nac17jmfnRBebYYoJltehCognAU+xAAAAIEAmI1SEcjqSTHRnHeypg08ppcpRUGx0Mkcb/Moos2SVfSfWBXrNR7p6eRzVPN0gCXSLsiaE0DaRvM+GPRJeffCh4+Ahx84Gptf0m+EXH47sPfsumk8XxItDZa4zYYJ2gAISBdLD06iMtmJWAzD59FXDaHedxom9/Hb7oQXHEUzQQY= test@VScode",
		"ecdsa-sha2-nistp521 AAAAE2VjZHNhLXNoYTItbmlzdHA1MjEAAAAIbmlzdHA1MjEAAACFBAF9dgZNa82njYtBR2zhCQs1yHL/GqA+AAmz97bjj2t2EQwMepx3TT8RubZscqwt6yedPREJU/8x0XtoEWkQzjBkGgCc2ip8xGyy6j3Th9YtYj9gW1g7Rwmqwnz0ZOd/l12tC3q7ujS7hlInkhxbOyhqNXZ+obseOaS0g5Toqpgr+mV1Rg== test@VScode",
		"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEY5T2JQgiL5Z5Yuy4yXuUYglVJlpsokHFXR1hvnCVYW cardno:18 228 342"}
	return strings.Join(keys, "\n")
}

func test_sshKeyUrlEncode_Output() string {
	encodedKeys := []string{
		"ssh-rsa%20AAAAB3NzaC1yc2EAAAADAQABAAABAQDT7lsC9gTAjL0FUPlHqnz71TzqDMdsdHhWu54M7NN4E9KNzKwzUy1h6ZuOMm%2Bd0nWX%2ByuT2Mfzi8NaKe5ATg0bwmrzZ1ikS%2FtGs7v%2FTyMSBOlmrS5v0g8rn40bphCqnNeNcfP9JR2zyq4UccpdIYA62t6Ky9d%2FWBbsAQRESwZVhpU9JGhwnVHFcNN5svlDwz9wzW1a2J2%2FE76%2Bvym%2B3Rt4W9s3MqQZdbHozo4N43puXq7PH1tTr%2FRT84uaMF4XLx1CUm%2BbMZLgtac8sHl1DJz4gC3MLasD6UXZzRz99K%2BQAHD6YsXHDwdWu6QAkqzS0DNDbm0E618wn4GEZAJJhehh%20test%40VScode",
		"ssh-dss%20AAAAB3NzaC1kc3MAAACBAN6VwM2CMPrpz0CT8z4UP5we4Jt1MSDHumArdzTaxaqtAcV6Z%2Ba4ZO%2F0geqEDZJSideX7Iq8zYrzdXGXfR%2B8N5GHoz49mVFit101cKAvcwZhzVeXQ1Cc8Zyjk53qmjWiNonfsjxP9VorNjjb%2FzGnA3ZnazflfyzqwEr8fV7JtUwjAAAAFQDlk3FT%2BQmsKiiBjBuekwyFeVzwiwAAAIBeAlzP9hsVeEbPjEjkxi9%2FhVgNQE8xtuUMZUCq7NOu5RlGzPHStzh8ByMh0Jsly0GbVHUfM84ikSpU%2FL5O3j75vq%2Bcng77mezAGWfHfBpAL%2BwhKfXvYHy0mqb0M1krzbdRbQkt9TV4gNw%2BNac17jmfnRBebYYoJltehCognAU%2BxAAAAIEAmI1SEcjqSTHRnHeypg08ppcpRUGx0Mkcb%2FMoos2SVfSfWBXrNR7p6eRzVPN0gCXSLsiaE0DaRvM%2BGPRJeffCh4%2BAhx84Gptf0m%2BEXH47sPfsumk8XxItDZa4zYYJ2gAISBdLD06iMtmJWAzD59FXDaHedxom9%2FHb7oQXHEUzQQY%3D%20test%40VScode",
		"ecdsa-sha2-nistp521%20AAAAE2VjZHNhLXNoYTItbmlzdHA1MjEAAAAIbmlzdHA1MjEAAACFBAF9dgZNa82njYtBR2zhCQs1yHL%2FGqA%2BAAmz97bjj2t2EQwMepx3TT8RubZscqwt6yedPREJU%2F8x0XtoEWkQzjBkGgCc2ip8xGyy6j3Th9YtYj9gW1g7Rwmqwnz0ZOd%2Fl12tC3q7ujS7hlInkhxbOyhqNXZ%2BobseOaS0g5Toqpgr%2BmV1Rg%3D%3D%20test%40VScode",
		"ssh-ed25519%20AAAAC3NzaC1lZDI1NTE5AAAAIEY5T2JQgiL5Z5Yuy4yXuUYglVJlpsokHFXR1hvnCVYW%20cardno%3A18%20228%20342"}
	return strings.Join(encodedKeys, "%0A") + "%0A"
}
