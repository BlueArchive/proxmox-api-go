package proxmox

import (
	"errors"
	"strings"
	"testing"

	"github.com/Telmate/proxmox-api-go/test/data/test_data_qemu"
	"github.com/stretchr/testify/require"
)

func Test_ConfigQemu_Validate(t *testing.T) {
	BandwidthValid0 := QemuDiskBandwidth{
		Data: QemuDiskBandwidthData{
			ReadLimit: QemuDiskBandwidthDataLimit{
				Burst:      0,
				Concurrent: 0,
			},
			WriteLimit: QemuDiskBandwidthDataLimit{
				Burst:      0,
				Concurrent: 0,
			},
		},
		Iops: QemuDiskBandwidthIops{
			ReadLimit: QemuDiskBandwidthIopsLimit{
				Burst:      0,
				Concurrent: 0,
			},
			WriteLimit: QemuDiskBandwidthIopsLimit{
				Burst:      0,
				Concurrent: 0,
			},
		},
	}
	BandwidthValid1 := QemuDiskBandwidth{
		Data: QemuDiskBandwidthData{
			ReadLimit: QemuDiskBandwidthDataLimit{
				Burst:      1,
				Concurrent: 1,
			},
			WriteLimit: QemuDiskBandwidthDataLimit{
				Burst:      1,
				Concurrent: 1,
			},
		},
		Iops: QemuDiskBandwidthIops{
			ReadLimit: QemuDiskBandwidthIopsLimit{
				Burst:      10,
				Concurrent: 10,
			},
			WriteLimit: QemuDiskBandwidthIopsLimit{
				Burst:      10,
				Concurrent: 10,
			},
		},
	}
	BandwidthValid2 := QemuDiskBandwidth{
		Data: QemuDiskBandwidthData{
			ReadLimit: QemuDiskBandwidthDataLimit{
				Burst:      1,
				Concurrent: 0,
			},
			WriteLimit: QemuDiskBandwidthDataLimit{
				Burst:      1,
				Concurrent: 0,
			},
		},
		Iops: QemuDiskBandwidthIops{
			ReadLimit: QemuDiskBandwidthIopsLimit{
				Burst:      10,
				Concurrent: 0,
			},
			WriteLimit: QemuDiskBandwidthIopsLimit{
				Burst:      10,
				Concurrent: 0,
			},
		},
	}
	BandwidthValid3 := QemuDiskBandwidth{
		Data: QemuDiskBandwidthData{
			ReadLimit: QemuDiskBandwidthDataLimit{
				Burst:      0,
				Concurrent: 1,
			},
			WriteLimit: QemuDiskBandwidthDataLimit{
				Burst:      0,
				Concurrent: 1,
			},
		},
		Iops: QemuDiskBandwidthIops{
			ReadLimit: QemuDiskBandwidthIopsLimit{
				Burst:      0,
				Concurrent: 10,
			},
			WriteLimit: QemuDiskBandwidthIopsLimit{
				Burst:      0,
				Concurrent: 10,
			},
		},
	}
	validCloudInit := QemuCloudInitDisk{Format: QemuDiskFormat_Raw, Storage: "Test"}
	testData := []struct {
		name  string
		input ConfigQemu
		err   error
	}{
		// Valid
		// Valid Disks
		{name: "Valid Disks Empty 0",
			input: ConfigQemu{Disks: &QemuStorages{}},
		},
		{name: "Valid Disks Empty 1",
			input: ConfigQemu{Disks: &QemuStorages{
				Ide:    &QemuIdeDisks{Disk_0: &QemuIdeStorage{}},
				Sata:   &QemuSataDisks{Disk_0: &QemuSataStorage{}},
				Scsi:   &QemuScsiDisks{Disk_0: &QemuScsiStorage{}},
				VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{}},
			}},
		},
		// Valid Disks CdRom
		{name: "Valid Disks CdRom",
			input: ConfigQemu{Disks: &QemuStorages{
				Ide:    &QemuIdeDisks{Disk_0: &QemuIdeStorage{CdRom: &QemuCdRom{}}},
				Sata:   &QemuSataDisks{Disk_0: &QemuSataStorage{CdRom: &QemuCdRom{Iso: &IsoFile{File: "test", Storage: "test"}}}},
				Scsi:   &QemuScsiDisks{Disk_0: &QemuScsiStorage{CdRom: &QemuCdRom{Passthrough: true}}},
				VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{CdRom: &QemuCdRom{Iso: &IsoFile{File: "test", Storage: "test"}}}},
			}},
		},
		// Valid Disks CloudInit
		{name: "Valid Disks CloudInit Ide",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{CloudInit: &validCloudInit}}}},
		},
		{name: "Valid Disks CloudInit Sata",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{CloudInit: &validCloudInit}}}},
		},
		{name: "Valid Disks CloudInit Scsi",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_0: &QemuScsiStorage{CloudInit: &validCloudInit}}}},
		},
		{name: "Valid Disks CloudInit VirtIO",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{CloudInit: &validCloudInit}}}},
		},
		// Valid Disks Disk
		{name: "Valid Disks Disk",
			input: ConfigQemu{Disks: &QemuStorages{
				Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Disk: &QemuIdeDisk{
					AsyncIO:   QemuDiskAsyncIO_IOuring,
					Bandwidth: BandwidthValid0,
					Cache:     QemuDiskCache_DirectSync,
					Format:    QemuDiskFormat_Raw,
					Size:      32,
					Storage:   "test",
				}}},
				Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{Disk: &QemuSataDisk{
					AsyncIO:   QemuDiskAsyncIO_Native,
					Bandwidth: BandwidthValid1,
					Cache:     QemuDiskCache_None,
					Format:    QemuDiskFormat_Cow,
					Size:      1,
					Storage:   "test",
				}}},
				Scsi: &QemuScsiDisks{Disk_0: &QemuScsiStorage{Disk: &QemuScsiDisk{
					AsyncIO:   QemuDiskAsyncIO_Threads,
					Bandwidth: BandwidthValid2,
					Cache:     QemuDiskCache_WriteBack,
					Format:    QemuDiskFormat_Qcow2,
					Size:      10,
					Storage:   "test",
				}}},
				VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
					AsyncIO:   "",
					Bandwidth: BandwidthValid3,
					Cache:     "",
					Format:    QemuDiskFormat_Vmdk,
					Size:      1024,
					Storage:   "test",
				}}},
			}},
		},
		// Valid Disks Passthrough
		{name: "Valid Disks Passthrough",
			input: ConfigQemu{Disks: &QemuStorages{
				Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{
					AsyncIO:   QemuDiskAsyncIO_IOuring,
					Bandwidth: BandwidthValid3,
					Cache:     QemuDiskCache_DirectSync,
					File:      "test",
				}}},
				Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{Passthrough: &QemuSataPassthrough{
					AsyncIO:   QemuDiskAsyncIO_Native,
					Bandwidth: BandwidthValid2,
					Cache:     "",
					File:      "test",
				}}},
				Scsi: &QemuScsiDisks{Disk_0: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{
					AsyncIO:   QemuDiskAsyncIO_Threads,
					Bandwidth: BandwidthValid1,
					Cache:     QemuDiskCache_WriteBack,
					File:      "test",
				}}},
				VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{
					AsyncIO:   "",
					Bandwidth: BandwidthValid0,
					Cache:     QemuDiskCache_WriteThrough,
					File:      "test",
				}}},
			}},
		},
		// Invalid
		// Invalid Disks Mutually exclusive Ide
		{name: "Invalid Disks MutuallyExclusive Ide 0",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{
				CdRom:     &QemuCdRom{},
				CloudInit: &QemuCloudInitDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Ide 1",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{
				CdRom: &QemuCdRom{},
				Disk:  &QemuIdeDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Ide 2",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{
				CdRom:       &QemuCdRom{},
				Passthrough: &QemuIdePassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Ide 3",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{
				CloudInit: &QemuCloudInitDisk{},
				Disk:      &QemuIdeDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Ide 4",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{
				CloudInit:   &QemuCloudInitDisk{},
				Passthrough: &QemuIdePassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Ide 5",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{
				Disk:        &QemuIdeDisk{},
				Passthrough: &QemuIdePassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Ide 6",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{
				CdRom:     &QemuCdRom{},
				CloudInit: &QemuCloudInitDisk{},
				Disk:      &QemuIdeDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Ide 7",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{
				CloudInit:   &QemuCloudInitDisk{},
				Disk:        &QemuIdeDisk{},
				Passthrough: &QemuIdePassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Ide 8",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{
				CdRom:       &QemuCdRom{},
				Disk:        &QemuIdeDisk{},
				Passthrough: &QemuIdePassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Ide 9",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{
				CdRom:       &QemuCdRom{},
				CloudInit:   &QemuCloudInitDisk{},
				Passthrough: &QemuIdePassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Ide 10",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{
				CdRom:       &QemuCdRom{},
				CloudInit:   &QemuCloudInitDisk{},
				Disk:        &QemuIdeDisk{},
				Passthrough: &QemuIdePassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		// Invalid Disks Mutually exclusive Sata
		{name: "Invalid Disks MutuallyExclusive Sata 0",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{
				CdRom:     &QemuCdRom{},
				CloudInit: &QemuCloudInitDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Sata 1",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{
				CdRom: &QemuCdRom{},
				Disk:  &QemuSataDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Sata 2",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{
				CdRom:       &QemuCdRom{},
				Passthrough: &QemuSataPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Sata 3",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_3: &QemuSataStorage{
				CloudInit: &QemuCloudInitDisk{},
				Disk:      &QemuSataDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Sata 4",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_4: &QemuSataStorage{
				CloudInit:   &QemuCloudInitDisk{},
				Passthrough: &QemuSataPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Sata 5",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_5: &QemuSataStorage{
				Disk:        &QemuSataDisk{},
				Passthrough: &QemuSataPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Sata 6",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{
				CdRom:     &QemuCdRom{},
				CloudInit: &QemuCloudInitDisk{},
				Disk:      &QemuSataDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Sata 7",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{
				CloudInit:   &QemuCloudInitDisk{},
				Disk:        &QemuSataDisk{},
				Passthrough: &QemuSataPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Sata 8",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{
				CdRom:       &QemuCdRom{},
				Disk:        &QemuSataDisk{},
				Passthrough: &QemuSataPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Sata 9",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_3: &QemuSataStorage{
				CdRom:       &QemuCdRom{},
				CloudInit:   &QemuCloudInitDisk{},
				Passthrough: &QemuSataPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Sata 10",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_4: &QemuSataStorage{
				CdRom:       &QemuCdRom{},
				CloudInit:   &QemuCloudInitDisk{},
				Disk:        &QemuSataDisk{},
				Passthrough: &QemuSataPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		// Invalid Disks Mutually exclusive Scsi
		{name: "Invalid Disks MutuallyExclusive Scsi 0",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_0: &QemuScsiStorage{
				CdRom:     &QemuCdRom{},
				CloudInit: &QemuCloudInitDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Scsi 1",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_1: &QemuScsiStorage{
				CdRom: &QemuCdRom{},
				Disk:  &QemuScsiDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Scsi 2",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_2: &QemuScsiStorage{
				CdRom:       &QemuCdRom{},
				Passthrough: &QemuScsiPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Scsi 3",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_3: &QemuScsiStorage{
				CloudInit: &QemuCloudInitDisk{},
				Disk:      &QemuScsiDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Scsi 4",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_4: &QemuScsiStorage{
				CloudInit:   &QemuCloudInitDisk{},
				Passthrough: &QemuScsiPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Scsi 5",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_5: &QemuScsiStorage{
				Disk:        &QemuScsiDisk{},
				Passthrough: &QemuScsiPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Scsi 6",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_6: &QemuScsiStorage{
				CdRom:     &QemuCdRom{},
				CloudInit: &QemuCloudInitDisk{},
				Disk:      &QemuScsiDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Scsi 7",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_7: &QemuScsiStorage{
				CloudInit:   &QemuCloudInitDisk{},
				Disk:        &QemuScsiDisk{},
				Passthrough: &QemuScsiPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Scsi 8",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_8: &QemuScsiStorage{
				CdRom:       &QemuCdRom{},
				Disk:        &QemuScsiDisk{},
				Passthrough: &QemuScsiPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Scsi 9",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_9: &QemuScsiStorage{
				CdRom:       &QemuCdRom{},
				CloudInit:   &QemuCloudInitDisk{},
				Passthrough: &QemuScsiPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive Scsi 10",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_10: &QemuScsiStorage{
				CdRom:       &QemuCdRom{},
				CloudInit:   &QemuCloudInitDisk{},
				Disk:        &QemuScsiDisk{},
				Passthrough: &QemuScsiPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		// Invalid Disks Mutually exclusive VirtIO
		{name: "Invalid Disks MutuallyExclusive VirtIO 0",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{
				CdRom:     &QemuCdRom{},
				CloudInit: &QemuCloudInitDisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive VirtIO 1",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_1: &QemuVirtIOStorage{
				CdRom: &QemuCdRom{},
				Disk:  &QemuVirtIODisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive VirtIO 2",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_2: &QemuVirtIOStorage{
				CdRom:       &QemuCdRom{},
				Passthrough: &QemuVirtIOPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive VirtIO 3",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_3: &QemuVirtIOStorage{
				CloudInit: &QemuCloudInitDisk{},
				Disk:      &QemuVirtIODisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive VirtIO 4",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_4: &QemuVirtIOStorage{
				CloudInit:   &QemuCloudInitDisk{},
				Passthrough: &QemuVirtIOPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive VirtIO 5",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_5: &QemuVirtIOStorage{
				Disk:        &QemuVirtIODisk{},
				Passthrough: &QemuVirtIOPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive VirtIO 6",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_6: &QemuVirtIOStorage{
				CdRom:     &QemuCdRom{},
				CloudInit: &QemuCloudInitDisk{},
				Disk:      &QemuVirtIODisk{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive VirtIO 7",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_7: &QemuVirtIOStorage{
				CloudInit:   &QemuCloudInitDisk{},
				Disk:        &QemuVirtIODisk{},
				Passthrough: &QemuVirtIOPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive VirtIO 8",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_8: &QemuVirtIOStorage{
				CdRom:       &QemuCdRom{},
				Disk:        &QemuVirtIODisk{},
				Passthrough: &QemuVirtIOPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive VirtIO 9",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_9: &QemuVirtIOStorage{
				CdRom:       &QemuCdRom{},
				CloudInit:   &QemuCloudInitDisk{},
				Passthrough: &QemuVirtIOPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		{name: "Invalid Disks MutuallyExclusive VirtIO 10",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_10: &QemuVirtIOStorage{
				CdRom:       &QemuCdRom{},
				CloudInit:   &QemuCloudInitDisk{},
				Disk:        &QemuVirtIODisk{},
				Passthrough: &QemuVirtIOPassthrough{},
			}}}},
			err: errors.New(Error_QemuDisk_MutuallyExclusive),
		},
		// Invalid Disks CdRom Ide
		{name: "Invalid Disks CdRom Ide errors.New(Error_IsoFile_File) 0",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{CdRom: &QemuCdRom{Iso: &IsoFile{}}}}}},
			err:   errors.New(Error_IsoFile_File),
		},
		{name: "Invalid Disks CdRom Ide errors.New(Error_IsoFile_File) 1",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{CdRom: &QemuCdRom{Iso: &IsoFile{Storage: "test"}}}}}},
			err:   errors.New(Error_IsoFile_File),
		},
		{name: "Invalid Disks CdRom Ide errors.New(Error_IsoFile_Storage)",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{CdRom: &QemuCdRom{Iso: &IsoFile{File: "test"}}}}}},
			err:   errors.New(Error_IsoFile_Storage),
		},
		{name: "Invalid Disks CdRom Ide errors.New(Error_QemuCdRom_MutuallyExclusive)",
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{CdRom: &QemuCdRom{Iso: &IsoFile{File: "test", Storage: "test"}, Passthrough: true}}}}},
			err:   errors.New(Error_QemuCdRom_MutuallyExclusive),
		},
		// Invalid Disks CdRom Sata
		{name: "Invalid Disks CdRom Sata errors.New(Error_IsoFile_File) 0",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{CdRom: &QemuCdRom{Iso: &IsoFile{}}}}}},
			err:   errors.New(Error_IsoFile_File),
		},
		{name: "Invalid Disks CdRom Sata errors.New(Error_IsoFile_File) 1",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{CdRom: &QemuCdRom{Iso: &IsoFile{Storage: "test"}}}}}},
			err:   errors.New(Error_IsoFile_File),
		},
		{name: "Invalid Disks CdRom Sata errors.New(Error_IsoFile_Storage)",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{CdRom: &QemuCdRom{Iso: &IsoFile{File: "test"}}}}}},
			err:   errors.New(Error_IsoFile_Storage),
		},
		{name: "Invalid Disks CdRom Sata errors.New(Error_QemuCdRom_MutuallyExclusive)",
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_3: &QemuSataStorage{CdRom: &QemuCdRom{Iso: &IsoFile{File: "test", Storage: "test"}, Passthrough: true}}}}},
			err:   errors.New(Error_QemuCdRom_MutuallyExclusive),
		},
		// Invalid Disks CdRom Scsi
		{name: "Invalid Disks CdRom Scsi errors.New(Error_IsoFile_File) 0",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_0: &QemuScsiStorage{CdRom: &QemuCdRom{Iso: &IsoFile{}}}}}},
			err:   errors.New(Error_IsoFile_File),
		},
		{name: "Invalid Disks CdRom Scsi errors.New(Error_IsoFile_File) 1",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_2: &QemuScsiStorage{CdRom: &QemuCdRom{Iso: &IsoFile{Storage: "test"}}}}}},
			err:   errors.New(Error_IsoFile_File),
		},
		{name: "Invalid Disks CdRom Scsi errors.New(Error_IsoFile_Storage)",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_1: &QemuScsiStorage{CdRom: &QemuCdRom{Iso: &IsoFile{File: "test"}}}}}},
			err:   errors.New(Error_IsoFile_Storage),
		},
		{name: "Invalid Disks CdRom Scsi errors.New(Error_QemuCdRom_MutuallyExclusive)",
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_3: &QemuScsiStorage{CdRom: &QemuCdRom{Iso: &IsoFile{File: "test", Storage: "test"}, Passthrough: true}}}}},
			err:   errors.New(Error_QemuCdRom_MutuallyExclusive),
		},
		// Invalid Disks CdRom VirtIO
		{name: "Invalid Disks CdRom VirtIO errors.New(Error_IsoFile_File) 0",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{CdRom: &QemuCdRom{Iso: &IsoFile{}}}}}},
			err:   errors.New(Error_IsoFile_File),
		},
		{name: "Invalid Disks CdRom VirtIO errors.New(Error_IsoFile_File) 1",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_2: &QemuVirtIOStorage{CdRom: &QemuCdRom{Iso: &IsoFile{Storage: "test"}}}}}},
			err:   errors.New(Error_IsoFile_File),
		},
		{name: "Invalid Disks CdRom VirtIO errors.New(Error_IsoFile_Storage)",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_1: &QemuVirtIOStorage{CdRom: &QemuCdRom{Iso: &IsoFile{File: "test"}}}}}},
			err:   errors.New(Error_IsoFile_Storage),
		},
		{name: "Invalid Disks CdRom VirtIO errors.New(Error_QemuCdRom_MutuallyExclusive)",
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_3: &QemuVirtIOStorage{CdRom: &QemuCdRom{Iso: &IsoFile{File: "test", Storage: "test"}, Passthrough: true}}}}},
			err:   errors.New(Error_QemuCdRom_MutuallyExclusive),
		},
		// Invalid Disks CloudInit Duplicate
		{name: "Invalid Disks CloudInit Duplicate errors.New(Error_QemuCloudInitDisk_OnlyOne)",
			input: ConfigQemu{Disks: &QemuStorages{
				Ide:    &QemuIdeDisks{Disk_0: &QemuIdeStorage{CloudInit: &validCloudInit}},
				Sata:   &QemuSataDisks{Disk_0: &QemuSataStorage{CloudInit: &validCloudInit}},
				Scsi:   &QemuScsiDisks{Disk_0: &QemuScsiStorage{CloudInit: &validCloudInit}},
				VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{CloudInit: &validCloudInit}},
			}},
			err: errors.New(Error_QemuCloudInitDisk_OnlyOne),
		},
		{name: "Invalid Disks CloudInit Duplicate Ide errors.New(Error_QemuCloudInitDisk_OnlyOne)",
			input: ConfigQemu{Disks: &QemuStorages{
				Ide: &QemuIdeDisks{
					Disk_0: &QemuIdeStorage{CloudInit: &validCloudInit},
					Disk_1: &QemuIdeStorage{CloudInit: &validCloudInit},
				},
			}},
			err: errors.New(Error_QemuCloudInitDisk_OnlyOne),
		},
		{name: "Invalid Disks CloudInit Duplicate Sata errors.New(Error_QemuCloudInitDisk_OnlyOne)",
			input: ConfigQemu{Disks: &QemuStorages{
				Sata: &QemuSataDisks{
					Disk_0: &QemuSataStorage{CloudInit: &validCloudInit},
					Disk_1: &QemuSataStorage{CloudInit: &validCloudInit},
				},
			}},
			err: errors.New(Error_QemuCloudInitDisk_OnlyOne),
		},
		{name: "Invalid Disks CloudInit Duplicate Scsi errors.New(Error_QemuCloudInitDisk_OnlyOne)",
			input: ConfigQemu{Disks: &QemuStorages{
				Scsi: &QemuScsiDisks{
					Disk_0: &QemuScsiStorage{CloudInit: &validCloudInit},
					Disk_1: &QemuScsiStorage{CloudInit: &validCloudInit},
				},
			}},
			err: errors.New(Error_QemuCloudInitDisk_OnlyOne),
		},
		{name: "Invalid Disks CloudInit Duplicate VirtIO errors.New(Error_QemuCloudInitDisk_OnlyOne)",
			input: ConfigQemu{Disks: &QemuStorages{
				VirtIO: &QemuVirtIODisks{
					Disk_0: &QemuVirtIOStorage{CloudInit: &validCloudInit},
					Disk_1: &QemuVirtIOStorage{CloudInit: &validCloudInit},
				},
			}},
			err: errors.New(Error_QemuCloudInitDisk_OnlyOne),
		},
		// Invalid Disks CloudInit Ide
		{name: `Invalid Disks CloudInit Ide QemuDiskFormat("").Error() 0`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{CloudInit: &QemuCloudInitDisk{}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks CloudInit Ide QemuDiskFormat("").Error() 1`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{CloudInit: &QemuCloudInitDisk{Storage: "test"}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks CloudInit Ide errors.New(Error_QemuCloudInitDisk_Storage)`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{CloudInit: &QemuCloudInitDisk{Format: QemuDiskFormat_Raw}}}}},
			err:   errors.New(Error_QemuCloudInitDisk_Storage),
		},
		// Invalid Disks CloudInit Sata
		{name: `Invalid Disks CloudInit Sata QemuDiskFormat("").Error() 0`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{CloudInit: &QemuCloudInitDisk{}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks CloudInit Sata QemuDiskFormat("").Error() 1`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{CloudInit: &QemuCloudInitDisk{Storage: "test"}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks CloudInit Sata errors.New(Error_QemuCloudInitDisk_Storage)`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{CloudInit: &QemuCloudInitDisk{Format: QemuDiskFormat_Raw}}}}},
			err:   errors.New(Error_QemuCloudInitDisk_Storage),
		},
		// Invalid Disks CloudInit Scsi
		{name: `Invalid Disks CloudInit Scsi QemuDiskFormat("").Error() 0`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_0: &QemuScsiStorage{CloudInit: &QemuCloudInitDisk{}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks CloudInit Scsi QemuDiskFormat("").Error() 1`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_1: &QemuScsiStorage{CloudInit: &QemuCloudInitDisk{Storage: "test"}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks CloudInit Scsi errors.New(Error_QemuCloudInitDisk_Storage)`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_2: &QemuScsiStorage{CloudInit: &QemuCloudInitDisk{Format: QemuDiskFormat_Raw}}}}},
			err:   errors.New(Error_QemuCloudInitDisk_Storage),
		},
		// Invalid Disks CloudInit VirtIO
		{name: `Invalid Disks CloudInit VirtIO QemuDiskFormat("").Error() 0`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{CloudInit: &QemuCloudInitDisk{}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks CloudInit VirtIO QemuDiskFormat("").Error() 1`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_1: &QemuVirtIOStorage{CloudInit: &QemuCloudInitDisk{Storage: "test"}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks CloudInit VirtIO errors.New(Error_QemuCloudInitDisk_Storage)`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_2: &QemuVirtIOStorage{CloudInit: &QemuCloudInitDisk{Format: QemuDiskFormat_Raw}}}}},
			err:   errors.New(Error_QemuCloudInitDisk_Storage),
		},
		// Invalid Disks Disk Ide
		{name: `Invalid Disks Disk Ide QemuDiskFormat("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Disk: &QemuIdeDisk{}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks Disk Ide QemuDiskAsyncIO("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Disk: &QemuIdeDisk{AsyncIO: "invalid"}}}}},
			err:   QemuDiskAsyncIO("").Error(),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{Disk: &QemuIdeDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{Disk: &QemuIdeDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Disk: &QemuIdeDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Disk: &QemuIdeDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{Disk: &QemuIdeDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 9}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{Disk: &QemuIdeDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 8}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Disk: &QemuIdeDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 7}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Disk: &QemuIdeDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 6}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Ide QemuDiskCache("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{Disk: &QemuIdeDisk{Cache: "invalid"}}}}},
			err:   QemuDiskCache("").Error(),
		},
		{name: `Invalid Disks Disk Ide QemuDiskFormat("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{Disk: &QemuIdeDisk{Format: ""}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDiskSerial_IllegalCharacter)`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Format: QemuDiskFormat_Raw,
				Serial: "!@^$^&$^&"},
			}}}},
			err: errors.New(Error_QemuDiskSerial_IllegalCharacter),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDiskSerial_IllegalLength)`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Format: QemuDiskFormat_Raw,
				Serial: QemuDiskSerial(test_data_qemu.QemuDiskSerial_Max_Illegal()),
			}}}}},
			err: errors.New(Error_QemuDiskSerial_IllegalLength),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDisk_Size)`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Format: QemuDiskFormat_Raw,
				Size:   0,
			}}}}},
			err: errors.New(Error_QemuDisk_Size),
		},
		{name: `Invalid Disks Disk Ide errors.New(Error_QemuDisk_Storage)`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{Disk: &QemuIdeDisk{
				Format:  QemuDiskFormat_Raw,
				Size:    32,
				Storage: "",
			}}}}},
			err: errors.New(Error_QemuDisk_Storage),
		},
		// Invalid Disks Disk Sata
		{name: `Invalid Disks Disk Sata QemuDiskFormat("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{Disk: &QemuSataDisk{}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks Disk Sata QemuDiskAsyncIO("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{Disk: &QemuSataDisk{AsyncIO: "invalid"}}}}},
			err:   QemuDiskAsyncIO("").Error(),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{Disk: &QemuSataDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_3: &QemuSataStorage{Disk: &QemuSataDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_4: &QemuSataStorage{Disk: &QemuSataDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_5: &QemuSataStorage{Disk: &QemuSataDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{Disk: &QemuSataDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 9}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{Disk: &QemuSataDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 8}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{Disk: &QemuSataDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 7}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_3: &QemuSataStorage{Disk: &QemuSataDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 6}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Sata QemuDiskCache("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_4: &QemuSataStorage{Disk: &QemuSataDisk{Cache: "invalid"}}}}},
			err:   QemuDiskCache("").Error(),
		},
		{name: `Invalid Disks Disk Sata QemuDiskFormat("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_5: &QemuSataStorage{Disk: &QemuSataDisk{Format: ""}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDiskSerial_IllegalCharacter)`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{Disk: &QemuSataDisk{
				Format: QemuDiskFormat_Raw,
				Serial: "!@^$^&$^&"},
			}}}},
			err: errors.New(Error_QemuDiskSerial_IllegalCharacter),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDiskSerial_IllegalLength)`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{Disk: &QemuSataDisk{
				Format: QemuDiskFormat_Raw,
				Serial: QemuDiskSerial(test_data_qemu.QemuDiskSerial_Max_Illegal()),
			}}}}},
			err: errors.New(Error_QemuDiskSerial_IllegalLength),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDisk_Size)`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{Disk: &QemuSataDisk{
				Format: QemuDiskFormat_Raw,
				Size:   0,
			}}}}},
			err: errors.New(Error_QemuDisk_Size),
		},
		{name: `Invalid Disks Disk Sata errors.New(Error_QemuDisk_Storage)`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_3: &QemuSataStorage{Disk: &QemuSataDisk{
				Format:  QemuDiskFormat_Raw,
				Size:    32,
				Storage: "",
			}}}}},
			err: errors.New(Error_QemuDisk_Storage),
		},
		// Invalid Disks Disk Scsi
		{name: `Invalid Disks Disk Scsi QemuDiskFormat("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_0: &QemuScsiStorage{Disk: &QemuScsiDisk{}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks Disk Scsi QemuDiskAsyncIO("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_1: &QemuScsiStorage{Disk: &QemuScsiDisk{AsyncIO: "invalid"}}}}},
			err:   QemuDiskAsyncIO("").Error(),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_2: &QemuScsiStorage{Disk: &QemuScsiDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_3: &QemuScsiStorage{Disk: &QemuScsiDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_4: &QemuScsiStorage{Disk: &QemuScsiDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_5: &QemuScsiStorage{Disk: &QemuScsiDisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_6: &QemuScsiStorage{Disk: &QemuScsiDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 9}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_7: &QemuScsiStorage{Disk: &QemuScsiDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 8}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_8: &QemuScsiStorage{Disk: &QemuScsiDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 7}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_9: &QemuScsiStorage{Disk: &QemuScsiDisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 6}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Disk Scsi QemuDiskCache("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_10: &QemuScsiStorage{Disk: &QemuScsiDisk{Cache: "invalid"}}}}},
			err:   QemuDiskCache("").Error(),
		},
		{name: `Invalid Disks Disk Scsi QemuDiskFormat("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_11: &QemuScsiStorage{Disk: &QemuScsiDisk{Format: ""}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDiskSerial_IllegalCharacter)`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_12: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Format: QemuDiskFormat_Raw,
				Serial: "!@^$^&$^&"},
			}}}},
			err: errors.New(Error_QemuDiskSerial_IllegalCharacter),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDiskSerial_IllegalLength)`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_13: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Format: QemuDiskFormat_Raw,
				Serial: QemuDiskSerial(test_data_qemu.QemuDiskSerial_Max_Illegal()),
			}}}}},
			err: errors.New(Error_QemuDiskSerial_IllegalLength),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDisk_Size)`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_14: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Format: QemuDiskFormat_Raw,
				Size:   0,
			}}}}},
			err: errors.New(Error_QemuDisk_Size),
		},
		{name: `Invalid Disks Disk Scsi errors.New(Error_QemuDisk_Storage)`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_15: &QemuScsiStorage{Disk: &QemuScsiDisk{
				Format:  QemuDiskFormat_Raw,
				Size:    32,
				Storage: "",
			}}}}},
			err: errors.New(Error_QemuDisk_Storage),
		},
		// Invalid Disks Disk VirtIO
		{name: `Invalid Disks Disk VirtIO QemuDiskFormat("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks Disk VirtIO QemuDiskAsyncIO("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_1: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{AsyncIO: "invalid"}}}}},
			err:   QemuDiskAsyncIO("").Error(),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_2: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_3: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_4: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_5: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_6: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 9}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_7: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 8}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_8: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 7}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_9: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 6}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Disk VirtIO QemuDiskCache("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_10: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{Cache: "invalid"}}}}},
			err:   QemuDiskCache("").Error(),
		},
		{name: `Invalid Disks Disk VirtIO QemuDiskFormat("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_11: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{Format: ""}}}}},
			err:   QemuDiskFormat("").Error(),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDiskSerial_IllegalCharacter)`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_12: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Format: QemuDiskFormat_Raw,
				Serial: "!@^$^&$^&"},
			}}}},
			err: errors.New(Error_QemuDiskSerial_IllegalCharacter),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDiskSerial_IllegalLength)`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_13: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Format: QemuDiskFormat_Raw,
				Serial: QemuDiskSerial(test_data_qemu.QemuDiskSerial_Max_Illegal()),
			}}}}},
			err: errors.New(Error_QemuDiskSerial_IllegalLength),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDisk_Size)`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_14: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Format: QemuDiskFormat_Raw,
				Size:   0,
			}}}}},
			err: errors.New(Error_QemuDisk_Size),
		},
		{name: `Invalid Disks Disk VirtIO errors.New(Error_QemuDisk_Storage)`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_15: &QemuVirtIOStorage{Disk: &QemuVirtIODisk{
				Format:  QemuDiskFormat_Raw,
				Size:    32,
				Storage: "",
			}}}}},
			err: errors.New(Error_QemuDisk_Storage),
		},
		// Invalid Disks Passthrough Ide
		{name: `Invalid Disks Passthrough Ide QemuDiskAsyncIO("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{AsyncIO: "invalid"}}}}},
			err:   QemuDiskAsyncIO("").Error(),
		},
		{name: `Invalid Disks Passthrough Ide errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Ide errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Ide errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Ide errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Ide errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 9}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Ide errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 8}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Ide errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 7}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Ide errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 6}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Ide QemuDiskCache("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_1: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{Cache: "invalid"}}}}},
			err:   QemuDiskCache("").Error(),
		},
		{name: `Invalid Disks Passthrough Ide errors.New(Error_QemuDisk_File)`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_2: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{File: ""}}}}},
			err:   errors.New(Error_QemuDisk_File),
		},
		{name: `Invalid Disks Passthrough Ide errors.New(Error_QemuDiskSerial_IllegalCharacter)`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_3: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{File: "/dev/disk/by-id/scsi1", Serial: "!@^$^&$^&"}}}}},
			err:   errors.New(Error_QemuDiskSerial_IllegalCharacter),
		},
		{name: `Invalid Disks Passthrough Ide errors.New(Error_QemuDiskSerial_IllegalLength)`,
			input: ConfigQemu{Disks: &QemuStorages{Ide: &QemuIdeDisks{Disk_0: &QemuIdeStorage{Passthrough: &QemuIdePassthrough{File: "/dev/disk/by-id/scsi1", Serial: QemuDiskSerial(test_data_qemu.QemuDiskSerial_Max_Illegal())}}}}},
			err:   errors.New(Error_QemuDiskSerial_IllegalLength),
		},
		// Invalid Disks Passthrough Sata
		{name: `Invalid Disks Passthrough Sata QemuDiskAsyncIO("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{Passthrough: &QemuSataPassthrough{AsyncIO: "invalid"}}}}},
			err:   QemuDiskAsyncIO("").Error(),
		},
		{name: `Invalid Disks Passthrough Sata errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{Passthrough: &QemuSataPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Sata errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{Passthrough: &QemuSataPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Sata errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_3: &QemuSataStorage{Passthrough: &QemuSataPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Sata errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_4: &QemuSataStorage{Passthrough: &QemuSataPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Sata errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_5: &QemuSataStorage{Passthrough: &QemuSataPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 9}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Sata errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{Passthrough: &QemuSataPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 8}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Sata errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_1: &QemuSataStorage{Passthrough: &QemuSataPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 7}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Sata errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_2: &QemuSataStorage{Passthrough: &QemuSataPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 6}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Sata QemuDiskCache("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_3: &QemuSataStorage{Passthrough: &QemuSataPassthrough{Cache: "invalid"}}}}},
			err:   QemuDiskCache("").Error(),
		},
		{name: `Invalid Disks Passthrough Sata errors.New(Error_QemuDisk_File)`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_4: &QemuSataStorage{Passthrough: &QemuSataPassthrough{File: ""}}}}},
			err:   errors.New(Error_QemuDisk_File),
		},
		{name: `Invalid Disks Passthrough Sata errors.New(Error_QemuDiskSerial_IllegalCharacter)`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_5: &QemuSataStorage{Passthrough: &QemuSataPassthrough{File: "/dev/disk/by-id/scsi1", Serial: "!@^$^&$^&"}}}}},
			err:   errors.New(Error_QemuDiskSerial_IllegalCharacter),
		},
		{name: `Invalid Disks Passthrough Sata errors.New(Error_QemuDiskSerial_IllegalLength)`,
			input: ConfigQemu{Disks: &QemuStorages{Sata: &QemuSataDisks{Disk_0: &QemuSataStorage{Passthrough: &QemuSataPassthrough{File: "/dev/disk/by-id/scsi1", Serial: QemuDiskSerial(test_data_qemu.QemuDiskSerial_Max_Illegal())}}}}},
			err:   errors.New(Error_QemuDiskSerial_IllegalLength),
		},
		// Invalid Disks Passthrough Scsi
		{name: `Invalid Disks Passthrough Scsi QemuDiskAsyncIO("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_0: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{AsyncIO: "invalid"}}}}},
			err:   QemuDiskAsyncIO("").Error(),
		},
		{name: `Invalid Disks Passthrough Scsi errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_1: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Scsi errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_2: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Scsi errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_3: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Scsi errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_4: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Scsi errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_5: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 9}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Scsi errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_6: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 8}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Scsi errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_7: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 7}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Passthrough Scsi errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_8: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 6}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough Scsi QemuDiskCache("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_9: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{Cache: "invalid"}}}}},
			err:   QemuDiskCache("").Error(),
		},
		{name: `Invalid Disks Passthrough Scsi errors.New(Error_QemuDisk_File)`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_10: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{File: ""}}}}},
			err:   errors.New(Error_QemuDisk_File),
		},
		{name: `Invalid Disks Passthrough Scsi errors.New(Error_QemuDiskSerial_IllegalCharacter)`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_11: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{File: "/dev/disk/by-id/scsi1", Serial: "!@^$^&$^&"}}}}},
			err:   errors.New(Error_QemuDiskSerial_IllegalCharacter),
		},
		{name: `Invalid Disks Passthrough Scsi errors.New(Error_QemuDiskSerial_IllegalLength)`,
			input: ConfigQemu{Disks: &QemuStorages{Scsi: &QemuScsiDisks{Disk_12: &QemuScsiStorage{Passthrough: &QemuScsiPassthrough{File: "/dev/disk/by-id/scsi1", Serial: QemuDiskSerial(test_data_qemu.QemuDiskSerial_Max_Illegal())}}}}},
			err:   errors.New(Error_QemuDiskSerial_IllegalLength),
		},
		// Invalid Disks Passthrough VirtIO
		{name: `Invalid Disks Passthrough VirtIO QemuDiskAsyncIO("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_0: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{AsyncIO: "invalid"}}}}},
			err:   QemuDiskAsyncIO("").Error(),
		},
		{name: `Invalid Disks Passthrough VirtIO errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_1: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Passthrough VirtIO errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_2: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{ReadLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough VirtIO errors.New(Error_QemuDiskBandwidthDataLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_3: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Burst: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Burst),
		},
		{name: `Invalid Disks Passthrough VirtIO errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_4: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{Bandwidth: QemuDiskBandwidth{Data: QemuDiskBandwidthData{WriteLimit: QemuDiskBandwidthDataLimit{Concurrent: 0.99}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthDataLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough VirtIO errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 0`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_5: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Burst: 9}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Passthrough VirtIO errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 0`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_6: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{ReadLimit: QemuDiskBandwidthIopsLimit{Concurrent: 8}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough VirtIO errors.New(Error_QemuDiskBandwidthIopsLimit_Burst) 1`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_7: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Burst: 7}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Burst),
		},
		{name: `Invalid Disks Passthrough VirtIO errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent) 1`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_8: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{Bandwidth: QemuDiskBandwidth{Iops: QemuDiskBandwidthIops{WriteLimit: QemuDiskBandwidthIopsLimit{Concurrent: 6}}}}}}}},
			err:   errors.New(Error_QemuDiskBandwidthIopsLimit_Concurrent),
		},
		{name: `Invalid Disks Passthrough VirtIO QemuDiskCache("").Error()`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_9: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{Cache: "invalid"}}}}},
			err:   QemuDiskCache("").Error(),
		},
		{name: `Invalid Disks Passthrough VirtIO errors.New(Error_QemuDisk_File)`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_10: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{File: ""}}}}},
			err:   errors.New(Error_QemuDisk_File),
		},
		{name: `Invalid Disks Passthrough VirtIO errors.New(Error_QemuDiskSerial_IllegalCharacter)`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_11: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{File: "/dev/disk/by-id/scsi1", Serial: "!@^$^&$^&"}}}}},
			err:   errors.New(Error_QemuDiskSerial_IllegalCharacter),
		},
		{name: `Invalid Disks Passthrough VirtIO errors.New(Error_QemuDiskSerial_IllegalLength)`,
			input: ConfigQemu{Disks: &QemuStorages{VirtIO: &QemuVirtIODisks{Disk_12: &QemuVirtIOStorage{Passthrough: &QemuVirtIOPassthrough{File: "/dev/disk/by-id/scsi1", Serial: QemuDiskSerial(test_data_qemu.QemuDiskSerial_Max_Illegal())}}}}},
			err:   errors.New(Error_QemuDiskSerial_IllegalLength),
		},
	}
	for _, test := range testData {
		t.Run(test.name, func(*testing.T) {
			if test.err != nil {
				require.Equal(t, test.input.Validate(), test.err, test.name)
			} else {
				require.NoError(t, test.input.Validate(), test.name)
			}
		})
	}
}

// Test the encoding logic to encode the ssh keys
func Test_sshKeyUrlEncode(t *testing.T) {
	input := test_sshKeyUrlEncode_Input()
	output := test_sshKeyUrlEncode_Output()
	test := sshKeyUrlEncode(input)
	require.Equal(t, output, test)
}

func test_sshKeyUrlEncode_Input() string {
	keys := []string{
		"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDT7lsC9gTAjL0FUPlHqnz71TzqDMdsdHhWu54M7NN4E9KNzKwzUy1h6ZuOMm+d0nWX+yuT2Mfzi8NaKe5ATg0bwmrzZ1ikS/tGs7v/TyMSBOlmrS5v0g8rn40bphCqnNeNcfP9JR2zyq4UccpdIYA62t6Ky9d/WBbsAQRESwZVhpU9JGhwnVHFcNN5svlDwz9wzW1a2J2/E76+vym+3Rt4W9s3MqQZdbHozo4N43puXq7PH1tTr/RT84uaMF4XLx1CUm+bMZLgtac8sHl1DJz4gC3MLasD6UXZzRz99K+QAHD6YsXHDwdWu6QAkqzS0DNDbm0E618wn4GEZAJJhehh test@VScode",
		"ssh-dss AAAAB3NzaC1kc3MAAACBAN6VwM2CMPrpz0CT8z4UP5we4Jt1MSDHumArdzTaxaqtAcV6Z+a4ZO/0geqEDZJSideX7Iq8zYrzdXGXfR+8N5GHoz49mVFit101cKAvcwZhzVeXQ1Cc8Zyjk53qmjWiNonfsjxP9VorNjjb/zGnA3ZnazflfyzqwEr8fV7JtUwjAAAAFQDlk3FT+QmsKiiBjBuekwyFeVzwiwAAAIBeAlzP9hsVeEbPjEjkxi9/hVgNQE8xtuUMZUCq7NOu5RlGzPHStzh8ByMh0Jsly0GbVHUfM84ikSpU/L5O3j75vq+cng77mezAGWfHfBpAL+whKfXvYHy0mqb0M1krzbdRbQkt9TV4gNw+Nac17jmfnRBebYYoJltehCognAU+xAAAAIEAmI1SEcjqSTHRnHeypg08ppcpRUGx0Mkcb/Moos2SVfSfWBXrNR7p6eRzVPN0gCXSLsiaE0DaRvM+GPRJeffCh4+Ahx84Gptf0m+EXH47sPfsumk8XxItDZa4zYYJ2gAISBdLD06iMtmJWAzD59FXDaHedxom9/Hb7oQXHEUzQQY= test@VScode",
		"ecdsa-sha2-nistp521 AAAAE2VjZHNhLXNoYTItbmlzdHA1MjEAAAAIbmlzdHA1MjEAAACFBAF9dgZNa82njYtBR2zhCQs1yHL/GqA+AAmz97bjj2t2EQwMepx3TT8RubZscqwt6yedPREJU/8x0XtoEWkQzjBkGgCc2ip8xGyy6j3Th9YtYj9gW1g7Rwmqwnz0ZOd/l12tC3q7ujS7hlInkhxbOyhqNXZ+obseOaS0g5Toqpgr+mV1Rg== test@VScode",
		"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEY5T2JQgiL5Z5Yuy4yXuUYglVJlpsokHFXR1hvnCVYW cardno:18 228 342"}
	return strings.Join(keys, "\n")
}

func test_sshKeyUrlEncode_Output() string {
	encodedKeys := []string{
		"ssh-rsa%20AAAAB3NzaC1yc2EAAAADAQABAAABAQDT7lsC9gTAjL0FUPlHqnz71TzqDMdsdHhWu54M7NN4E9KNzKwzUy1h6ZuOMm%2Bd0nWX%2ByuT2Mfzi8NaKe5ATg0bwmrzZ1ikS%2FtGs7v%2FTyMSBOlmrS5v0g8rn40bphCqnNeNcfP9JR2zyq4UccpdIYA62t6Ky9d%2FWBbsAQRESwZVhpU9JGhwnVHFcNN5svlDwz9wzW1a2J2%2FE76%2Bvym%2B3Rt4W9s3MqQZdbHozo4N43puXq7PH1tTr%2FRT84uaMF4XLx1CUm%2BbMZLgtac8sHl1DJz4gC3MLasD6UXZzRz99K%2BQAHD6YsXHDwdWu6QAkqzS0DNDbm0E618wn4GEZAJJhehh%20test%40VScode",
		"ssh-dss%20AAAAB3NzaC1kc3MAAACBAN6VwM2CMPrpz0CT8z4UP5we4Jt1MSDHumArdzTaxaqtAcV6Z%2Ba4ZO%2F0geqEDZJSideX7Iq8zYrzdXGXfR%2B8N5GHoz49mVFit101cKAvcwZhzVeXQ1Cc8Zyjk53qmjWiNonfsjxP9VorNjjb%2FzGnA3ZnazflfyzqwEr8fV7JtUwjAAAAFQDlk3FT%2BQmsKiiBjBuekwyFeVzwiwAAAIBeAlzP9hsVeEbPjEjkxi9%2FhVgNQE8xtuUMZUCq7NOu5RlGzPHStzh8ByMh0Jsly0GbVHUfM84ikSpU%2FL5O3j75vq%2Bcng77mezAGWfHfBpAL%2BwhKfXvYHy0mqb0M1krzbdRbQkt9TV4gNw%2BNac17jmfnRBebYYoJltehCognAU%2BxAAAAIEAmI1SEcjqSTHRnHeypg08ppcpRUGx0Mkcb%2FMoos2SVfSfWBXrNR7p6eRzVPN0gCXSLsiaE0DaRvM%2BGPRJeffCh4%2BAhx84Gptf0m%2BEXH47sPfsumk8XxItDZa4zYYJ2gAISBdLD06iMtmJWAzD59FXDaHedxom9%2FHb7oQXHEUzQQY%3D%20test%40VScode",
		"ecdsa-sha2-nistp521%20AAAAE2VjZHNhLXNoYTItbmlzdHA1MjEAAAAIbmlzdHA1MjEAAACFBAF9dgZNa82njYtBR2zhCQs1yHL%2FGqA%2BAAmz97bjj2t2EQwMepx3TT8RubZscqwt6yedPREJU%2F8x0XtoEWkQzjBkGgCc2ip8xGyy6j3Th9YtYj9gW1g7Rwmqwnz0ZOd%2Fl12tC3q7ujS7hlInkhxbOyhqNXZ%2BobseOaS0g5Toqpgr%2BmV1Rg%3D%3D%20test%40VScode",
		"ssh-ed25519%20AAAAC3NzaC1lZDI1NTE5AAAAIEY5T2JQgiL5Z5Yuy4yXuUYglVJlpsokHFXR1hvnCVYW%20cardno%3A18%20228%20342"}
	return strings.Join(encodedKeys, "%0A") + "%0A"
}
